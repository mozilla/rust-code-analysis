// Code generated; DO NOT EDIT.

#[derive(Clone, Debug, PartialEq, FromPrimitive)]
pub enum Rust {
    End = 0,
    Identifier = 1,
    SEMI = 2,
    MacroRulesBANG = 3,
    LPAREN = 4,
    RPAREN = 5,
    LBRACE = 6,
    RBRACE = 7,
    EQGT = 8,
    LBRACK = 9,
    RBRACK = 10,
    COLON = 11,
    DOLLAR = 12,
    TokenRepetitionPatternToken1 = 13,
    PLUS = 14,
    STAR = 15,
    QMARK = 16,
    Block2 = 17,
    Expr = 18,
    Ident = 19,
    Item = 20,
    Lifetime2 = 21,
    Literal2 = 22,
    Meta = 23,
    Pat = 24,
    Path = 25,
    Stmt = 26,
    Tt = 27,
    Ty = 28,
    Vis = 29,
    PrimitiveType = 30,
    PrimitiveType2 = 31,
    PrimitiveType3 = 32,
    PrimitiveType4 = 33,
    PrimitiveType5 = 34,
    PrimitiveType6 = 35,
    PrimitiveType7 = 36,
    PrimitiveType8 = 37,
    PrimitiveType9 = 38,
    PrimitiveType10 = 39,
    PrimitiveType11 = 40,
    PrimitiveType12 = 41,
    PrimitiveType13 = 42,
    PrimitiveType14 = 43,
    PrimitiveType15 = 44,
    PrimitiveType16 = 45,
    PrimitiveType17 = 46,
    NonSpecialTokenToken1 = 47,
    SQUOTE = 48,
    As = 49,
    Async = 50,
    Await = 51,
    Break = 52,
    Const = 53,
    Continue = 54,
    Default = 55,
    Enum = 56,
    Fn = 57,
    For = 58,
    If = 59,
    Impl = 60,
    Let = 61,
    Loop = 62,
    Match = 63,
    Mod = 64,
    Pub = 65,
    Return = 66,
    Static = 67,
    Struct = 68,
    Trait = 69,
    Type2 = 70,
    Union = 71,
    Unsafe = 72,
    Use = 73,
    Where = 74,
    While = 75,
    HASH = 76,
    BANG = 77,
    EQ = 78,
    COMMA = 79,
    Extern = 80,
    Ref = 81,
    DASHGT = 82,
    LT = 83,
    GT = 84,
    COLONCOLON = 85,
    UNDERSCORE = 86,
    AMP = 87,
    DOTDOTDOT = 88,
    In = 89,
    LT2 = 90,
    Dyn = 91,
    MutableSpecifier = 92,
    DOTDOT = 93,
    DOTDOTEQ = 94,
    DASH = 95,
    AMPAMP = 96,
    PIPEPIPE = 97,
    PIPE = 98,
    CARET = 99,
    EQEQ = 100,
    BANGEQ = 101,
    LTEQ = 102,
    GTEQ = 103,
    LTLT = 104,
    GTGT = 105,
    SLASH = 106,
    PERCENT = 107,
    PLUSEQ = 108,
    DASHEQ = 109,
    STAREQ = 110,
    SLASHEQ = 111,
    PERCENTEQ = 112,
    AMPEQ = 113,
    PIPEEQ = 114,
    CARETEQ = 115,
    LTLTEQ = 116,
    GTGTEQ = 117,
    Else = 118,
    Move = 119,
    DOT = 120,
    AT = 121,
    IntegerLiteral = 122,
    DQUOTE = 123,
    DQUOTE2 = 124,
    CharLiteral = 125,
    EscapeSequence = 126,
    True = 127,
    False = 128,
    LineComment = 129,
    Zelf = 130,
    Super = 131,
    Crate = 132,
    Metavariable = 133,
    StringContent = 134,
    RawStringLiteral = 135,
    FloatLiteral = 136,
    BlockComment = 137,
    SourceFile = 138,
    Statement = 139,
    EmptyStatement = 140,
    ExpressionStatement = 141,
    MacroDefinition = 142,
    MacroRule = 143,
    TokenPattern = 144,
    TokenTreePattern = 145,
    TokenBindingPattern = 146,
    TokenRepetitionPattern = 147,
    FragmentSpecifier = 148,
    TokenTree = 149,
    TokenRepetition = 150,
    AttributeItem = 151,
    InnerAttributeItem = 152,
    MetaItem = 153,
    MetaArguments = 154,
    ModItem = 155,
    ForeignModItem = 156,
    DeclarationList = 157,
    StructItem = 158,
    UnionItem = 159,
    EnumItem = 160,
    EnumVariantList = 161,
    EnumVariant = 162,
    FieldDeclarationList = 163,
    FieldDeclaration = 164,
    OrderedFieldDeclarationList = 165,
    ExternCrateDeclaration = 166,
    ConstItem = 167,
    StaticItem = 168,
    TypeItem = 169,
    FunctionItem = 170,
    FunctionSignatureItem = 171,
    FunctionModifiers = 172,
    WhereClause = 173,
    WherePredicate = 174,
    ImplItem = 175,
    TraitItem = 176,
    AssociatedType = 177,
    TraitBounds = 178,
    HigherRankedTraitBound = 179,
    RemovedTraitBound = 180,
    TypeParameters = 181,
    ConstParameter = 182,
    ConstrainedTypeParameter = 183,
    OptionalTypeParameter = 184,
    LetDeclaration = 185,
    UseDeclaration = 186,
    UseClause = 187,
    ScopedUseList = 188,
    UseList = 189,
    UseAsClause = 190,
    UseWildcard = 191,
    Parameters = 192,
    SelfParameter = 193,
    VariadicParameter = 194,
    Parameter = 195,
    ExternModifier = 196,
    VisibilityModifier = 197,
    Type = 198,
    BracketedType = 199,
    QualifiedType = 200,
    Lifetime = 201,
    ArrayType = 202,
    ForLifetimes = 203,
    FunctionType = 204,
    TupleType = 205,
    UnitType = 206,
    GenericFunction = 207,
    GenericType = 208,
    GenericTypeWithTurbofish = 209,
    BoundedType = 210,
    TypeArguments = 211,
    TypeBinding = 212,
    ReferenceType = 213,
    PointerType = 214,
    EmptyType = 215,
    AbstractType = 216,
    DynamicType = 217,
    Expression = 218,
    MacroInvocation = 219,
    ScopedIdentifier = 220,
    ScopedTypeIdentifier = 221,
    ScopedTypeIdentifier2 = 222,
    RangeExpression = 223,
    UnaryExpression = 224,
    TryExpression = 225,
    ReferenceExpression = 226,
    BinaryExpression = 227,
    AssignmentExpression = 228,
    CompoundAssignmentExpr = 229,
    TypeCastExpression = 230,
    ReturnExpression = 231,
    CallExpression = 232,
    Arguments = 233,
    ArrayExpression = 234,
    ParenthesizedExpression = 235,
    TupleExpression = 236,
    UnitExpression = 237,
    StructExpression = 238,
    FieldInitializerList = 239,
    ShorthandFieldInitializer = 240,
    FieldInitializer = 241,
    BaseFieldInitializer = 242,
    IfExpression = 243,
    IfLetExpression = 244,
    ElseClause = 245,
    MatchExpression = 246,
    MatchBlock = 247,
    MatchArm = 248,
    MatchArm2 = 249,
    MatchPattern = 250,
    WhileExpression = 251,
    WhileLetExpression = 252,
    LoopExpression = 253,
    ForExpression = 254,
    ConstBlock = 255,
    ClosureExpression = 256,
    ClosureParameters = 257,
    LoopLabel = 258,
    BreakExpression = 259,
    ContinueExpression = 260,
    IndexExpression = 261,
    AwaitExpression = 262,
    FieldExpression = 263,
    UnsafeBlock = 264,
    AsyncBlock = 265,
    Block = 266,
    Pattern = 267,
    TuplePattern = 268,
    SlicePattern = 269,
    TupleStructPattern = 270,
    StructPattern = 271,
    FieldPattern = 272,
    RemainingFieldPattern = 273,
    MutPattern = 274,
    RangePattern = 275,
    RefPattern = 276,
    CapturedPattern = 277,
    ReferencePattern = 278,
    OrPattern = 279,
    Literal = 280,
    LiteralPattern = 281,
    NegativeLiteral = 282,
    StringLiteral = 283,
    BooleanLiteral = 284,
    SourceFileRepeat1 = 285,
    MacroDefinitionRepeat1 = 286,
    TokenTreePatternRepeat1 = 287,
    TokenTreeRepeat1 = 288,
    MetaArgumentsRepeat1 = 289,
    DeclarationListRepeat1 = 290,
    EnumVariantListRepeat1 = 291,
    EnumVariantListRepeat2 = 292,
    FieldDeclarationListRepeat1 = 293,
    OrderedFieldDeclarationListRepeat1 = 294,
    FunctionModifiersRepeat1 = 295,
    WhereClauseRepeat1 = 296,
    TraitBoundsRepeat1 = 297,
    TypeParametersRepeat1 = 298,
    UseListRepeat1 = 299,
    ParametersRepeat1 = 300,
    ForLifetimesRepeat1 = 301,
    TupleTypeRepeat1 = 302,
    TypeArgumentsRepeat1 = 303,
    ArgumentsRepeat1 = 304,
    ArrayExpressionRepeat1 = 305,
    TupleExpressionRepeat1 = 306,
    FieldInitializerListRepeat1 = 307,
    MatchBlockRepeat1 = 308,
    ClosureParametersRepeat1 = 309,
    TuplePatternRepeat1 = 310,
    StructPatternRepeat1 = 311,
    StringLiteralRepeat1 = 312,
    FieldIdentifier = 313,
    ShorthandFieldIdentifier = 314,
    TypeIdentifier = 315,
    Error = 316,
}

#[allow(clippy::unreadable_literal)]
static KEYS: phf::Map<&'static str, Rust> = ::phf::Map {
    key: 12913932095322966823,
    disps: &[
        (0, 30),
        (0, 4),
        (0, 3),
        (3, 90),
        (0, 52),
        (9, 286),
        (1, 117),
        (0, 0),
        (4, 194),
        (5, 77),
        (0, 184),
        (0, 263),
        (0, 227),
        (0, 14),
        (0, 218),
        (0, 44),
        (0, 16),
        (0, 0),
        (3, 198),
        (0, 61),
        (0, 154),
        (0, 3),
        (0, 8),
        (13, 225),
        (1, 0),
        (0, 4),
        (0, 0),
        (0, 51),
        (8, 183),
        (0, 9),
        (0, 4),
        (1, 169),
        (0, 36),
        (1, 120),
        (1, 70),
        (0, 28),
        (12, 177),
        (2, 1),
        (1, 10),
        (1, 27),
        (0, 24),
        (0, 14),
        (0, 119),
        (4, 9),
        (0, 23),
        (0, 242),
        (9, 94),
        (10, 135),
        (0, 9),
        (0, 80),
        (15, 161),
        (0, 237),
        (0, 28),
        (0, 1),
        (0, 28),
        (7, 113),
        (0, 236),
        (0, 264),
        (0, 18),
    ],
    entries: &[
        ("field_declaration_list", Rust::FieldDeclarationList),
        ("else_clause", Rust::ElseClause),
        ("^", Rust::CARET),
        ("loop_expression", Rust::LoopExpression),
        ("struct_item", Rust::StructItem),
        ("token_tree_pattern", Rust::TokenTreePattern),
        ("function_modifiers_repeat1", Rust::FunctionModifiersRepeat1),
        ("reference_type", Rust::ReferenceType),
        (
            "ordered_field_declaration_list",
            Rust::OrderedFieldDeclarationList,
        ),
        ("macro_rule", Rust::MacroRule),
        ("break", Rust::Break),
        ("_literal_pattern", Rust::LiteralPattern),
        ("dyn", Rust::Dyn),
        ("async_block", Rust::AsyncBlock),
        ("extern_modifier", Rust::ExternModifier),
        ("where_predicate", Rust::WherePredicate),
        ("tuple_expression_repeat1", Rust::TupleExpressionRepeat1),
        ("mutable_specifier", Rust::MutableSpecifier),
        ("default", Rust::Default),
        ("_use_clause", Rust::UseClause),
        ("<<", Rust::LTLT),
        ("identifier", Rust::Identifier),
        ("async", Rust::Async),
        ("else", Rust::Else),
        ("use_as_clause", Rust::UseAsClause),
        ("tuple_type", Rust::TupleType),
        ("bounded_type", Rust::BoundedType),
        ("while_expression", Rust::WhileExpression),
        ("or_pattern", Rust::OrPattern),
        ("bracketed_type", Rust::BracketedType),
        ("-=", Rust::DASHEQ),
        ("extern_crate_declaration", Rust::ExternCrateDeclaration),
        ("loop", Rust::Loop),
        ("reference_pattern", Rust::ReferencePattern),
        ("_statement", Rust::Statement),
        ("block", Rust::Block),
        ("index_expression", Rust::IndexExpression),
        ("shorthand_field_identifier", Rust::ShorthandFieldIdentifier),
        ("return", Rust::Return),
        ("generic_function", Rust::GenericFunction),
        ("variadic_parameter", Rust::VariadicParameter),
        ("function_type", Rust::FunctionType),
        ("meta_item", Rust::MetaItem),
        ("<<=", Rust::LTLTEQ),
        ("enum_variant_list_repeat1", Rust::EnumVariantListRepeat1),
        ("negative_literal", Rust::NegativeLiteral),
        ("tuple_expression", Rust::TupleExpression),
        ("impl_item", Rust::ImplItem),
        ("declaration_list_repeat1", Rust::DeclarationListRepeat1),
        ("_", Rust::UNDERSCORE),
        ("escape_sequence", Rust::EscapeSequence),
        ("impl", Rust::Impl),
        ("function_signature_item", Rust::FunctionSignatureItem),
        ("empty_type", Rust::EmptyType),
        (
            "field_initializer_list_repeat1",
            Rust::FieldInitializerListRepeat1,
        ),
        ("let", Rust::Let),
        ("mod", Rust::Mod),
        ("ty", Rust::Ty),
        ("match", Rust::Match),
        ("fragment_specifier", Rust::FragmentSpecifier),
        ("array_type", Rust::ArrayType),
        ("ERROR", Rust::Error),
        ("captured_pattern", Rust::CapturedPattern),
        ("tuple_struct_pattern", Rust::TupleStructPattern),
        ("binary_expression", Rust::BinaryExpression),
        ("..", Rust::DOTDOT),
        ("stmt", Rust::Stmt),
        ("break_expression", Rust::BreakExpression),
        ("pub", Rust::Pub),
        ("<=", Rust::LTEQ),
        ("visibility_modifier", Rust::VisibilityModifier),
        ("scoped_type_identifier", Rust::ScopedTypeIdentifier),
        ("in", Rust::In),
        ("crate", Rust::Crate),
        ("!", Rust::BANG),
        ("abstract_type", Rust::AbstractType),
        ("trait", Rust::Trait),
        ("enum", Rust::Enum),
        ("tt", Rust::Tt),
        ("super", Rust::Super),
        ("vis", Rust::Vis),
        ("as", Rust::As),
        ("reference_expression", Rust::ReferenceExpression),
        ("_literal", Rust::Literal),
        ("match_arm", Rust::MatchArm),
        ("static_item", Rust::StaticItem),
        ("'", Rust::SQUOTE),
        ("field_declaration", Rust::FieldDeclaration),
        ("base_field_initializer", Rust::BaseFieldInitializer),
        (")", Rust::RPAREN),
        ("continue", Rust::Continue),
        ("parameters", Rust::Parameters),
        ("let_declaration", Rust::LetDeclaration),
        ("match_block", Rust::MatchBlock),
        ("ident", Rust::Ident),
        ("struct_pattern_repeat1", Rust::StructPatternRepeat1),
        ("}", Rust::RBRACE),
        ("const_item", Rust::ConstItem),
        ("function_item", Rust::FunctionItem),
        (">=", Rust::GTEQ),
        ("while", Rust::While),
        ("_type", Rust::Type),
        (";", Rust::SEMI),
        ("const_parameter", Rust::ConstParameter),
        ("move", Rust::Move),
        ("macro_definition_repeat1", Rust::MacroDefinitionRepeat1),
        ("type_identifier", Rust::TypeIdentifier),
        ("path", Rust::Path),
        ("higher_ranked_trait_bound", Rust::HigherRankedTraitBound),
        ("await", Rust::Await),
        ("extern", Rust::Extern),
        ("arguments_repeat1", Rust::ArgumentsRepeat1),
        ("lifetime", Rust::Lifetime),
        ("field_initializer", Rust::FieldInitializer),
        (
            "generic_type_with_turbofish",
            Rust::GenericTypeWithTurbofish,
        ),
        ("remaining_field_pattern", Rust::RemainingFieldPattern),
        ("foreign_mod_item", Rust::ForeignModItem),
        ("struct_expression", Rust::StructExpression),
        ("tuple_type_repeat1", Rust::TupleTypeRepeat1),
        ("unit_type", Rust::UnitType),
        ("qualified_type", Rust::QualifiedType),
        ("ref_pattern", Rust::RefPattern),
        ("for", Rust::For),
        ("self_parameter", Rust::SelfParameter),
        ("enum_item", Rust::EnumItem),
        ("type_arguments", Rust::TypeArguments),
        ("tuple_pattern", Rust::TuplePattern),
        ("tuple_pattern_repeat1", Rust::TuplePatternRepeat1),
        ("true", Rust::True),
        ("removed_trait_bound", Rust::RemovedTraitBound),
        ("meta", Rust::Meta),
        ("self", Rust::Zelf),
        ("trait_bounds", Rust::TraitBounds),
        ("try_expression", Rust::TryExpression),
        ("=", Rust::EQ),
        ("while_let_expression", Rust::WhileLetExpression),
        ("token_tree", Rust::TokenTree),
        ("*=", Rust::STAREQ),
        ("compound_assignment_expr", Rust::CompoundAssignmentExpr),
        ("||", Rust::PIPEPIPE),
        (">>=", Rust::GTGTEQ),
        ("type_arguments_repeat1", Rust::TypeArgumentsRepeat1),
        ("return_expression", Rust::ReturnExpression),
        ("closure_parameters", Rust::ClosureParameters),
        ("static", Rust::Static),
        ("enum_variant", Rust::EnumVariant),
        ("mut_pattern", Rust::MutPattern),
        ("macro_invocation", Rust::MacroInvocation),
        ("unsafe", Rust::Unsafe),
        ("macro_rules!", Rust::MacroRulesBANG),
        ("generic_type", Rust::GenericType),
        ("optional_type_parameter", Rust::OptionalTypeParameter),
        ("_expression_statement", Rust::ExpressionStatement),
        ("trait_item", Rust::TraitItem),
        ("^=", Rust::CARETEQ),
        ("parameter", Rust::Parameter),
        (":", Rust::COLON),
        ("==", Rust::EQEQ),
        ("field_initializer_list", Rust::FieldInitializerList),
        ("!=", Rust::BANGEQ),
        ("where_clause_repeat1", Rust::WhereClauseRepeat1),
        ("fn", Rust::Fn),
        ("primitive_type", Rust::PrimitiveType),
        ("for_lifetimes_repeat1", Rust::ForLifetimesRepeat1),
        (".", Rust::DOT),
        ("type_parameters_repeat1", Rust::TypeParametersRepeat1),
        (
            "token_repetition_pattern_token1",
            Rust::TokenRepetitionPatternToken1,
        ),
        ("&", Rust::AMP),
        ("type_item", Rust::TypeItem),
        ("\\\"", Rust::DQUOTE),
        ("&=", Rust::AMPEQ),
        ("const_block", Rust::ConstBlock),
        ("_expression", Rust::Expression),
        ("expr", Rust::Expr),
        ("match_expression", Rust::MatchExpression),
        ("const", Rust::Const),
        ("&&", Rust::AMPAMP),
        ("/=", Rust::SLASHEQ),
        ("match_pattern", Rust::MatchPattern),
        ("[", Rust::LBRACK),
        ("+", Rust::PLUS),
        ("<", Rust::LT),
        ("where_clause", Rust::WhereClause),
        ("if", Rust::If),
        ("parenthesized_expression", Rust::ParenthesizedExpression),
        ("integer_literal", Rust::IntegerLiteral),
        ("trait_bounds_repeat1", Rust::TraitBoundsRepeat1),
        ("pat", Rust::Pat),
        ("pointer_type", Rust::PointerType),
        ("boolean_literal", Rust::BooleanLiteral),
        ("(", Rust::LPAREN),
        ("struct", Rust::Struct),
        ("|", Rust::PIPE),
        ("macro_definition", Rust::MacroDefinition),
        ("use_declaration", Rust::UseDeclaration),
        ("block_comment", Rust::BlockComment),
        ("item", Rust::Item),
        ("float_literal", Rust::FloatLiteral),
        ("char_literal", Rust::CharLiteral),
        ("->", Rust::DASHGT),
        ("*", Rust::STAR),
        ("declaration_list", Rust::DeclarationList),
        ("use_list", Rust::UseList),
        ("use", Rust::Use),
        ("field_pattern", Rust::FieldPattern),
        ("?", Rust::QMARK),
        (",", Rust::COMMA),
        ("for_lifetimes", Rust::ForLifetimes),
        ("closure_expression", Rust::ClosureExpression),
        ("{", Rust::LBRACE),
        ("dynamic_type", Rust::DynamicType),
        ("if_expression", Rust::IfExpression),
        ("range_pattern", Rust::RangePattern),
        ("call_expression", Rust::CallExpression),
        ("mod_item", Rust::ModItem),
        ("where", Rust::Where),
        ("range_expression", Rust::RangeExpression),
        (">>", Rust::GTGT),
        ("constrained_type_parameter", Rust::ConstrainedTypeParameter),
        ("type_binding", Rust::TypeBinding),
        ("meta_arguments", Rust::MetaArguments),
        ("type_parameters", Rust::TypeParameters),
        ("continue_expression", Rust::ContinueExpression),
        ("%", Rust::PERCENT),
        ("unit_expression", Rust::UnitExpression),
        ("enum_variant_list_repeat2", Rust::EnumVariantListRepeat2),
        ("/", Rust::SLASH),
        ("scoped_identifier", Rust::ScopedIdentifier),
        ("array_expression", Rust::ArrayExpression),
        ("token_binding_pattern", Rust::TokenBindingPattern),
        ("]", Rust::RBRACK),
        ("field_expression", Rust::FieldExpression),
        ("parameters_repeat1", Rust::ParametersRepeat1),
        ("union_item", Rust::UnionItem),
        ("source_file", Rust::SourceFile),
        ("::", Rust::COLONCOLON),
        ("array_expression_repeat1", Rust::ArrayExpressionRepeat1),
        (">", Rust::GT),
        ("@", Rust::AT),
        (
            "field_declaration_list_repeat1",
            Rust::FieldDeclarationListRepeat1,
        ),
        ("_string_content", Rust::StringContent),
        ("=>", Rust::EQGT),
        ("associated_type", Rust::AssociatedType),
        ("%=", Rust::PERCENTEQ),
        ("string_literal_repeat1", Rust::StringLiteralRepeat1),
        ("token_repetition_pattern", Rust::TokenRepetitionPattern),
        ("use_list_repeat1", Rust::UseListRepeat1),
        ("#", Rust::HASH),
        ("token_repetition", Rust::TokenRepetition),
        ("_pattern", Rust::Pattern),
        ("$", Rust::DOLLAR),
        ("-", Rust::DASH),
        ("source_file_repeat1", Rust::SourceFileRepeat1),
        ("scoped_use_list", Rust::ScopedUseList),
        ("function_modifiers", Rust::FunctionModifiers),
        ("loop_label", Rust::LoopLabel),
        ("closure_parameters_repeat1", Rust::ClosureParametersRepeat1),
        ("empty_statement", Rust::EmptyStatement),
        ("meta_arguments_repeat1", Rust::MetaArgumentsRepeat1),
        ("ref", Rust::Ref),
        ("slice_pattern", Rust::SlicePattern),
        ("union", Rust::Union),
        ("type_cast_expression", Rust::TypeCastExpression),
        ("+=", Rust::PLUSEQ),
        ("match_block_repeat1", Rust::MatchBlockRepeat1),
        ("attribute_item", Rust::AttributeItem),
        ("string_literal", Rust::StringLiteral),
        ("token_tree_pattern_repeat1", Rust::TokenTreePatternRepeat1),
        ("raw_string_literal", Rust::RawStringLiteral),
        ("use_wildcard", Rust::UseWildcard),
        ("await_expression", Rust::AwaitExpression),
        ("field_identifier", Rust::FieldIdentifier),
        ("end", Rust::End),
        ("token_tree_repeat1", Rust::TokenTreeRepeat1),
        ("arguments", Rust::Arguments),
        ("struct_pattern", Rust::StructPattern),
        ("enum_variant_list", Rust::EnumVariantList),
        ("line_comment", Rust::LineComment),
        ("|=", Rust::PIPEEQ),
        ("assignment_expression", Rust::AssignmentExpression),
        (
            "ordered_field_declaration_list_repeat1",
            Rust::OrderedFieldDeclarationListRepeat1,
        ),
        ("unsafe_block", Rust::UnsafeBlock),
        ("false", Rust::False),
        ("metavariable", Rust::Metavariable),
        ("..=", Rust::DOTDOTEQ),
        ("inner_attribute_item", Rust::InnerAttributeItem),
        (
            "shorthand_field_initializer",
            Rust::ShorthandFieldInitializer,
        ),
        ("if_let_expression", Rust::IfLetExpression),
        ("_non_special_token_token1", Rust::NonSpecialTokenToken1),
        ("...", Rust::DOTDOTDOT),
        ("unary_expression", Rust::UnaryExpression),
        ("_token_pattern", Rust::TokenPattern),
        ("for_expression", Rust::ForExpression),
    ],
};

impl From<&str> for Rust {
    #[inline(always)]
    fn from(key: &str) -> Self {
        KEYS.get(key).unwrap().clone()
    }
}

impl From<u16> for Rust {
    #[inline(always)]
    fn from(x: u16) -> Self {
        num::FromPrimitive::from_u16(x).unwrap_or(Self::Error)
    }
}

// Rust == u16
impl PartialEq<u16> for Rust {
    #[inline(always)]
    fn eq(&self, x: &u16) -> bool {
        *self == Rust::from(*x)
    }
}

// u16 == Rust
impl PartialEq<Rust> for u16 {
    #[inline(always)]
    fn eq(&self, x: &Rust) -> bool {
        *x == *self
    }
}
