// Code generated; DO NOT EDIT.

#[derive(Clone, Debug, PartialEq, FromPrimitive)]
pub enum Rust {
    End = 0,
    Identifier = 1,
    SEMI = 2,
    MacroRulesBANG = 3,
    LPAREN = 4,
    RPAREN = 5,
    LBRACE = 6,
    RBRACE = 7,
    EQGT = 8,
    LBRACK = 9,
    RBRACK = 10,
    COLON = 11,
    DOLLAR = 12,
    TokenRepetitionPatternToken1 = 13,
    PLUS = 14,
    STAR = 15,
    QMARK = 16,
    Block2 = 17,
    Expr = 18,
    Ident = 19,
    Item = 20,
    Lifetime2 = 21,
    Literal2 = 22,
    Meta = 23,
    Pat = 24,
    Path = 25,
    Stmt = 26,
    Tt = 27,
    Ty = 28,
    Vis = 29,
    PrimitiveType = 30,
    PrimitiveType2 = 31,
    PrimitiveType3 = 32,
    PrimitiveType4 = 33,
    PrimitiveType5 = 34,
    PrimitiveType6 = 35,
    PrimitiveType7 = 36,
    PrimitiveType8 = 37,
    PrimitiveType9 = 38,
    PrimitiveType10 = 39,
    PrimitiveType11 = 40,
    PrimitiveType12 = 41,
    PrimitiveType13 = 42,
    PrimitiveType14 = 43,
    PrimitiveType15 = 44,
    PrimitiveType16 = 45,
    PrimitiveType17 = 46,
    NonSpecialTokenToken1 = 47,
    SQUOTE = 48,
    As = 49,
    Async = 50,
    Await = 51,
    Break = 52,
    Const = 53,
    Continue = 54,
    Default = 55,
    Enum = 56,
    Fn = 57,
    For = 58,
    If = 59,
    Impl = 60,
    Let = 61,
    Loop = 62,
    Match = 63,
    Mod = 64,
    Pub = 65,
    Return = 66,
    Static = 67,
    Struct = 68,
    Trait = 69,
    Type2 = 70,
    Union = 71,
    Unsafe = 72,
    Use = 73,
    Where = 74,
    While = 75,
    HASH = 76,
    BANG = 77,
    EQ = 78,
    COMMA = 79,
    Extern = 80,
    Ref = 81,
    DASHGT = 82,
    LT = 83,
    GT = 84,
    COLONCOLON = 85,
    UNDERSCORE = 86,
    AMP = 87,
    DOTDOTDOT = 88,
    In = 89,
    LT2 = 90,
    Dyn = 91,
    MutableSpecifier = 92,
    DOTDOT = 93,
    DOTDOTEQ = 94,
    DASH = 95,
    AMPAMP = 96,
    PIPEPIPE = 97,
    PIPE = 98,
    CARET = 99,
    EQEQ = 100,
    BANGEQ = 101,
    LTEQ = 102,
    GTEQ = 103,
    LTLT = 104,
    GTGT = 105,
    SLASH = 106,
    PERCENT = 107,
    PLUSEQ = 108,
    DASHEQ = 109,
    STAREQ = 110,
    SLASHEQ = 111,
    PERCENTEQ = 112,
    AMPEQ = 113,
    PIPEEQ = 114,
    CARETEQ = 115,
    LTLTEQ = 116,
    GTGTEQ = 117,
    Else = 118,
    Move = 119,
    DOT = 120,
    AT = 121,
    IntegerLiteral = 122,
    DQUOTE = 123,
    DQUOTE2 = 124,
    CharLiteral = 125,
    EscapeSequence = 126,
    True = 127,
    False = 128,
    LineComment = 129,
    Zelf = 130,
    Super = 131,
    Crate = 132,
    Metavariable = 133,
    StringContent = 134,
    RawStringLiteral = 135,
    FloatLiteral = 136,
    BlockComment = 137,
    SourceFile = 138,
    Statement = 139,
    EmptyStatement = 140,
    ExpressionStatement = 141,
    MacroDefinition = 142,
    MacroRule = 143,
    TokenPattern = 144,
    TokenTreePattern = 145,
    TokenBindingPattern = 146,
    TokenRepetitionPattern = 147,
    FragmentSpecifier = 148,
    TokenTree = 149,
    TokenRepetition = 150,
    AttributeItem = 151,
    InnerAttributeItem = 152,
    MetaItem = 153,
    MetaArguments = 154,
    ModItem = 155,
    ForeignModItem = 156,
    DeclarationList = 157,
    StructItem = 158,
    UnionItem = 159,
    EnumItem = 160,
    EnumVariantList = 161,
    EnumVariant = 162,
    FieldDeclarationList = 163,
    FieldDeclaration = 164,
    OrderedFieldDeclarationList = 165,
    ExternCrateDeclaration = 166,
    ConstItem = 167,
    StaticItem = 168,
    TypeItem = 169,
    FunctionItem = 170,
    FunctionSignatureItem = 171,
    FunctionModifiers = 172,
    WhereClause = 173,
    WherePredicate = 174,
    ImplItem = 175,
    TraitItem = 176,
    AssociatedType = 177,
    TraitBounds = 178,
    HigherRankedTraitBound = 179,
    RemovedTraitBound = 180,
    TypeParameters = 181,
    ConstParameter = 182,
    ConstrainedTypeParameter = 183,
    OptionalTypeParameter = 184,
    LetDeclaration = 185,
    UseDeclaration = 186,
    UseClause = 187,
    ScopedUseList = 188,
    UseList = 189,
    UseAsClause = 190,
    UseWildcard = 191,
    Parameters = 192,
    SelfParameter = 193,
    VariadicParameter = 194,
    Parameter = 195,
    ExternModifier = 196,
    VisibilityModifier = 197,
    Type = 198,
    BracketedType = 199,
    QualifiedType = 200,
    Lifetime = 201,
    ArrayType = 202,
    ForLifetimes = 203,
    FunctionType = 204,
    TupleType = 205,
    UnitType = 206,
    GenericFunction = 207,
    GenericType = 208,
    GenericTypeWithTurbofish = 209,
    BoundedType = 210,
    TypeArguments = 211,
    TypeBinding = 212,
    ReferenceType = 213,
    PointerType = 214,
    EmptyType = 215,
    AbstractType = 216,
    DynamicType = 217,
    Expression = 218,
    MacroInvocation = 219,
    ScopedIdentifier = 220,
    ScopedTypeIdentifier = 221,
    ScopedTypeIdentifier2 = 222,
    RangeExpression = 223,
    UnaryExpression = 224,
    TryExpression = 225,
    ReferenceExpression = 226,
    BinaryExpression = 227,
    AssignmentExpression = 228,
    CompoundAssignmentExpr = 229,
    TypeCastExpression = 230,
    ReturnExpression = 231,
    CallExpression = 232,
    Arguments = 233,
    ArrayExpression = 234,
    ParenthesizedExpression = 235,
    TupleExpression = 236,
    UnitExpression = 237,
    StructExpression = 238,
    FieldInitializerList = 239,
    ShorthandFieldInitializer = 240,
    FieldInitializer = 241,
    BaseFieldInitializer = 242,
    IfExpression = 243,
    IfLetExpression = 244,
    ElseClause = 245,
    MatchExpression = 246,
    MatchBlock = 247,
    MatchArm = 248,
    MatchArm2 = 249,
    MatchPattern = 250,
    WhileExpression = 251,
    WhileLetExpression = 252,
    LoopExpression = 253,
    ForExpression = 254,
    ConstBlock = 255,
    ClosureExpression = 256,
    ClosureParameters = 257,
    LoopLabel = 258,
    BreakExpression = 259,
    ContinueExpression = 260,
    IndexExpression = 261,
    AwaitExpression = 262,
    FieldExpression = 263,
    UnsafeBlock = 264,
    AsyncBlock = 265,
    Block = 266,
    Pattern = 267,
    TuplePattern = 268,
    SlicePattern = 269,
    TupleStructPattern = 270,
    StructPattern = 271,
    FieldPattern = 272,
    RemainingFieldPattern = 273,
    MutPattern = 274,
    RangePattern = 275,
    RefPattern = 276,
    CapturedPattern = 277,
    ReferencePattern = 278,
    OrPattern = 279,
    Literal = 280,
    LiteralPattern = 281,
    NegativeLiteral = 282,
    StringLiteral = 283,
    BooleanLiteral = 284,
    SourceFileRepeat1 = 285,
    MacroDefinitionRepeat1 = 286,
    TokenTreePatternRepeat1 = 287,
    TokenTreeRepeat1 = 288,
    MetaArgumentsRepeat1 = 289,
    DeclarationListRepeat1 = 290,
    EnumVariantListRepeat1 = 291,
    EnumVariantListRepeat2 = 292,
    FieldDeclarationListRepeat1 = 293,
    OrderedFieldDeclarationListRepeat1 = 294,
    FunctionModifiersRepeat1 = 295,
    WhereClauseRepeat1 = 296,
    TraitBoundsRepeat1 = 297,
    TypeParametersRepeat1 = 298,
    UseListRepeat1 = 299,
    ParametersRepeat1 = 300,
    ForLifetimesRepeat1 = 301,
    TupleTypeRepeat1 = 302,
    TypeArgumentsRepeat1 = 303,
    ArgumentsRepeat1 = 304,
    ArrayExpressionRepeat1 = 305,
    TupleExpressionRepeat1 = 306,
    FieldInitializerListRepeat1 = 307,
    MatchBlockRepeat1 = 308,
    ClosureParametersRepeat1 = 309,
    TuplePatternRepeat1 = 310,
    StructPatternRepeat1 = 311,
    StringLiteralRepeat1 = 312,
    FieldIdentifier = 313,
    ShorthandFieldIdentifier = 314,
    TypeIdentifier = 315,
    Error = 316,
}

impl std::fmt::Display for Rust {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{:?}", self)
    }
}

#[allow(clippy::unreadable_literal)]
static KEYS: phf::Map<&'static str, &'static str> = ::phf::Map {
    key: 3213172566270843353,
    disps: ::phf::Slice::Static(&[
        (0, 16),
        (0, 12),
        (0, 4),
        (0, 201),
        (0, 48),
        (0, 2),
        (0, 8),
        (1, 156),
        (4, 281),
        (0, 50),
        (0, 20),
        (0, 5),
        (0, 48),
        (0, 94),
        (0, 4),
        (0, 69),
        (0, 21),
        (0, 153),
        (0, 2),
        (0, 2),
        (1, 56),
        (0, 6),
        (0, 2),
        (0, 6),
        (0, 47),
        (0, 2),
        (0, 20),
        (1, 218),
        (0, 267),
        (0, 88),
        (1, 26),
        (1, 90),
        (0, 88),
        (0, 311),
        (0, 19),
        (0, 9),
        (0, 290),
        (0, 163),
        (1, 9),
        (0, 217),
        (0, 107),
        (1, 312),
        (4, 27),
        (4, 25),
        (0, 20),
        (1, 279),
        (9, 301),
        (0, 0),
        (0, 14),
        (1, 113),
        (0, 38),
        (0, 191),
        (4, 273),
        (0, 1),
        (7, 228),
        (1, 0),
        (17, 13),
        (0, 227),
        (4, 314),
        (0, 0),
        (0, 101),
        (1, 70),
        (21, 263),
        (26, 54),
    ]),
    entries: ::phf::Slice::Static(&[
        ("PIPEPIPE", "||"),
        ("TraitBoundsRepeat1", "trait_bounds_repeat1"),
        ("Pat", "pat"),
        ("ForeignModItem", "foreign_mod_item"),
        ("LetDeclaration", "let_declaration"),
        ("MatchArm2", "match_arm"),
        ("UnionItem", "union_item"),
        ("GTGT", ">>"),
        ("NonSpecialTokenToken1", "_non_special_token_token1"),
        ("LBRACE", "{"),
        ("MutableSpecifier", "mutable_specifier"),
        ("ConstrainedTypeParameter", "constrained_type_parameter"),
        ("MetaArguments", "meta_arguments"),
        ("MetaItem", "meta_item"),
        ("ConstBlock", "const_block"),
        ("Let", "let"),
        ("Block", "block"),
        ("SelfParameter", "self_parameter"),
        ("PrimitiveType7", "primitive_type"),
        ("BinaryExpression", "binary_expression"),
        ("Meta", "meta"),
        ("Lifetime", "lifetime"),
        ("Loop", "loop"),
        ("PrimitiveType6", "primitive_type"),
        ("Ident", "ident"),
        ("WhereClauseRepeat1", "where_clause_repeat1"),
        (
            "TokenRepetitionPatternToken1",
            "token_repetition_pattern_token1",
        ),
        ("UseDeclaration", "use_declaration"),
        ("ParenthesizedExpression", "parenthesized_expression"),
        ("FunctionModifiers", "function_modifiers"),
        ("DOTDOTDOT", "..."),
        ("UseList", "use_list"),
        ("DQUOTE", "\""),
        ("PrimitiveType2", "primitive_type"),
        ("InnerAttributeItem", "inner_attribute_item"),
        ("Statement", "_statement"),
        ("CompoundAssignmentExpr", "compound_assignment_expr"),
        ("Metavariable", "metavariable"),
        ("Break", "break"),
        ("PIPEEQ", "|="),
        ("PrimitiveType14", "primitive_type"),
        ("ModItem", "mod_item"),
        ("LTEQ", "<="),
        ("Literal", "_literal"),
        ("EQEQ", "=="),
        ("AwaitExpression", "await_expression"),
        ("IfExpression", "if_expression"),
        ("LTLT", "<<"),
        ("ForLifetimes", "for_lifetimes"),
        ("RBRACK", "]"),
        ("EmptyType", "empty_type"),
        ("Type2", "type"),
        ("SLASHEQ", "/="),
        ("TypeParametersRepeat1", "type_parameters_repeat1"),
        ("Pattern", "_pattern"),
        ("HigherRankedTraitBound", "higher_ranked_trait_bound"),
        ("MacroRulesBANG", "macro_rules!"),
        ("LT2", "<"),
        ("Block2", "block"),
        ("BaseFieldInitializer", "base_field_initializer"),
        ("Super", "super"),
        ("COLONCOLON", "::"),
        ("Use", "use"),
        ("PLUSEQ", "+="),
        ("LineComment", "line_comment"),
        ("MatchPattern", "match_pattern"),
        ("Await", "await"),
        ("DOT", "."),
        ("FunctionType", "function_type"),
        ("RefPattern", "ref_pattern"),
        ("TypeCastExpression", "type_cast_expression"),
        ("UNDERSCORE", "_"),
        ("For", "for"),
        ("TokenTree", "token_tree"),
        ("TraitItem", "trait_item"),
        ("VisibilityModifier", "visibility_modifier"),
        ("Match", "match"),
        ("IntegerLiteral", "integer_literal"),
        ("FunctionSignatureItem", "function_signature_item"),
        ("Extern", "extern"),
        ("ShorthandFieldInitializer", "shorthand_field_initializer"),
        ("COLON", ":"),
        ("TupleType", "tuple_type"),
        ("DeclarationList", "declaration_list"),
        ("SLASH", "/"),
        ("AMPEQ", "&="),
        ("BANG", "!"),
        ("ImplItem", "impl_item"),
        ("SQUOTE", "'"),
        ("OptionalTypeParameter", "optional_type_parameter"),
        ("WherePredicate", "where_predicate"),
        ("StaticItem", "static_item"),
        ("NegativeLiteral", "negative_literal"),
        ("ForExpression", "for_expression"),
        ("Error", "ERROR"),
        ("Path", "path"),
        ("TypeArguments", "type_arguments"),
        ("TraitBounds", "trait_bounds"),
        ("ExternCrateDeclaration", "extern_crate_declaration"),
        ("EnumVariantList", "enum_variant_list"),
        ("TuplePatternRepeat1", "tuple_pattern_repeat1"),
        ("MacroDefinitionRepeat1", "macro_definition_repeat1"),
        ("QMARK", "?"),
        ("FunctionItem", "function_item"),
        ("SourceFileRepeat1", "source_file_repeat1"),
        ("EnumVariantListRepeat2", "enum_variant_list_repeat2"),
        ("StructPatternRepeat1", "struct_pattern_repeat1"),
        ("TuplePattern", "tuple_pattern"),
        ("ScopedTypeIdentifier", "scoped_type_identifier"),
        ("MacroRule", "macro_rule"),
        ("While", "while"),
        ("TupleStructPattern", "tuple_struct_pattern"),
        ("Dyn", "dyn"),
        ("Ref", "ref"),
        ("Where", "where"),
        ("PrimitiveType16", "primitive_type"),
        ("StringLiteralRepeat1", "string_literal_repeat1"),
        ("TupleExpression", "tuple_expression"),
        ("UnitExpression", "unit_expression"),
        ("Lifetime2", "lifetime"),
        ("TypeItem", "type_item"),
        ("ParametersRepeat1", "parameters_repeat1"),
        ("GenericFunction", "generic_function"),
        ("STAR", "*"),
        ("StructPattern", "struct_pattern"),
        ("Pub", "pub"),
        ("PrimitiveType8", "primitive_type"),
        ("Zelf", "self"),
        ("RangeExpression", "range_expression"),
        ("MutPattern", "mut_pattern"),
        ("CARETEQ", "^="),
        ("ScopedTypeIdentifier2", "scoped_type_identifier"),
        ("AsyncBlock", "async_block"),
        ("MacroInvocation", "macro_invocation"),
        ("Stmt", "stmt"),
        ("MatchArm", "match_arm"),
        ("WhileExpression", "while_expression"),
        ("If", "if"),
        ("TokenBindingPattern", "token_binding_pattern"),
        ("SlicePattern", "slice_pattern"),
        ("LoopLabel", "loop_label"),
        ("ReturnExpression", "return_expression"),
        ("Expression", "_expression"),
        ("Ty", "ty"),
        ("Type", "_type"),
        ("UseWildcard", "use_wildcard"),
        ("ClosureExpression", "closure_expression"),
        ("TypeParameters", "type_parameters"),
        ("GTEQ", ">="),
        ("TokenRepetitionPattern", "token_repetition_pattern"),
        ("GT", ">"),
        ("ContinueExpression", "continue_expression"),
        ("ReferenceExpression", "reference_expression"),
        ("PLUS", "+"),
        ("FieldDeclarationList", "field_declaration_list"),
        ("FloatLiteral", "float_literal"),
        ("GenericTypeWithTurbofish", "generic_type_with_turbofish"),
        ("False", "false"),
        ("ClosureParametersRepeat1", "closure_parameters_repeat1"),
        ("TokenRepetition", "token_repetition"),
        ("MatchExpression", "match_expression"),
        ("Return", "return"),
        ("Move", "move"),
        ("UseClause", "_use_clause"),
        ("Impl", "impl"),
        ("SourceFile", "source_file"),
        ("CapturedPattern", "captured_pattern"),
        ("FieldPattern", "field_pattern"),
        ("DeclarationListRepeat1", "declaration_list_repeat1"),
        ("FragmentSpecifier", "fragment_specifier"),
        ("OrPattern", "or_pattern"),
        ("TypeArgumentsRepeat1", "type_arguments_repeat1"),
        ("PERCENT", "%"),
        ("ArrayExpression", "array_expression"),
        ("ScopedIdentifier", "scoped_identifier"),
        ("UnitType", "unit_type"),
        ("True", "true"),
        ("LBRACK", "["),
        ("Fn", "fn"),
        ("EmptyStatement", "empty_statement"),
        ("HASH", "#"),
        ("WhileLetExpression", "while_let_expression"),
        ("PERCENTEQ", "%="),
        ("DASHEQ", "-="),
        ("FieldIdentifier", "field_identifier"),
        ("TupleExpressionRepeat1", "tuple_expression_repeat1"),
        ("DASHGT", "->"),
        ("StructExpression", "struct_expression"),
        (
            "OrderedFieldDeclarationListRepeat1",
            "ordered_field_declaration_list_repeat1",
        ),
        ("ExpressionStatement", "_expression_statement"),
        ("As", "as"),
        ("FieldInitializer", "field_initializer"),
        ("QualifiedType", "qualified_type"),
        ("TokenTreePattern", "token_tree_pattern"),
        ("Default", "default"),
        ("BlockComment", "block_comment"),
        ("AMP", "&"),
        ("EnumItem", "enum_item"),
        ("AT", "@"),
        ("TokenPattern", "_token_pattern"),
        ("BracketedType", "bracketed_type"),
        ("Async", "async"),
        ("IfLetExpression", "if_let_expression"),
        ("VariadicParameter", "variadic_parameter"),
        ("EQ", "="),
        ("TypeIdentifier", "type_identifier"),
        ("PrimitiveType9", "primitive_type"),
        ("IndexExpression", "index_expression"),
        ("AMPAMP", "&&"),
        (
            "FieldInitializerListRepeat1",
            "field_initializer_list_repeat1",
        ),
        ("MatchBlock", "match_block"),
        ("UseAsClause", "use_as_clause"),
        ("CARET", "^"),
        ("DQUOTE2", "\""),
        ("Struct", "struct"),
        ("Union", "union"),
        ("Expr", "expr"),
        ("PrimitiveType10", "primitive_type"),
        ("PIPE", "|"),
        ("AttributeItem", "attribute_item"),
        ("Arguments", "arguments"),
        (
            "FieldDeclarationListRepeat1",
            "field_declaration_list_repeat1",
        ),
        ("RemovedTraitBound", "removed_trait_bound"),
        ("CharLiteral", "char_literal"),
        ("RemainingFieldPattern", "remaining_field_pattern"),
        ("PrimitiveType13", "primitive_type"),
        ("PrimitiveType15", "primitive_type"),
        ("PrimitiveType4", "primitive_type"),
        ("Parameters", "parameters"),
        ("StructItem", "struct_item"),
        ("ClosureParameters", "closure_parameters"),
        ("LiteralPattern", "_literal_pattern"),
        ("Unsafe", "unsafe"),
        ("Static", "static"),
        ("Else", "else"),
        ("STAREQ", "*="),
        ("EnumVariant", "enum_variant"),
        ("PrimitiveType12", "primitive_type"),
        ("AssignmentExpression", "assignment_expression"),
        ("Vis", "vis"),
        ("Const", "const"),
        ("DASH", "-"),
        ("ConstParameter", "const_parameter"),
        ("LTLTEQ", "<<="),
        ("BreakExpression", "break_expression"),
        ("UnaryExpression", "unary_expression"),
        ("Mod", "mod"),
        ("ShorthandFieldIdentifier", "shorthand_field_identifier"),
        ("Continue", "continue"),
        ("StringContent", "_string_content"),
        ("ArrayExpressionRepeat1", "array_expression_repeat1"),
        ("BooleanLiteral", "boolean_literal"),
        ("EnumVariantListRepeat1", "enum_variant_list_repeat1"),
        ("SEMI", ";"),
        ("MetaArgumentsRepeat1", "meta_arguments_repeat1"),
        ("ConstItem", "const_item"),
        ("ArrayType", "array_type"),
        ("FieldInitializerList", "field_initializer_list"),
        ("FunctionModifiersRepeat1", "function_modifiers_repeat1"),
        ("Parameter", "parameter"),
        ("End", "end"),
        ("ScopedUseList", "scoped_use_list"),
        ("PrimitiveType3", "primitive_type"),
        ("Crate", "crate"),
        ("LPAREN", "("),
        ("ForLifetimesRepeat1", "for_lifetimes_repeat1"),
        ("Item", "item"),
        ("PointerType", "pointer_type"),
        ("MatchBlockRepeat1", "match_block_repeat1"),
        ("LoopExpression", "loop_expression"),
        ("PrimitiveType", "primitive_type"),
        ("DOLLAR", "$"),
        ("ExternModifier", "extern_modifier"),
        ("TypeBinding", "type_binding"),
        (
            "OrderedFieldDeclarationList",
            "ordered_field_declaration_list",
        ),
        ("UseListRepeat1", "use_list_repeat1"),
        ("Trait", "trait"),
        ("AssociatedType", "associated_type"),
        ("Literal2", "literal"),
        ("GenericType", "generic_type"),
        ("In", "in"),
        ("Identifier", "identifier"),
        ("WhereClause", "where_clause"),
        ("TokenTreePatternRepeat1", "token_tree_pattern_repeat1"),
        ("Tt", "tt"),
        ("PrimitiveType11", "primitive_type"),
        ("RPAREN", ")"),
        ("UnsafeBlock", "unsafe_block"),
        ("ElseClause", "else_clause"),
        ("RawStringLiteral", "raw_string_literal"),
        ("CallExpression", "call_expression"),
        ("PrimitiveType5", "primitive_type"),
        ("DOTDOTEQ", "..="),
        ("COMMA", ","),
        ("ReferencePattern", "reference_pattern"),
        ("FieldDeclaration", "field_declaration"),
        ("EQGT", "=>"),
        ("EscapeSequence", "escape_sequence"),
        ("AbstractType", "abstract_type"),
        ("StringLiteral", "string_literal"),
        ("BoundedType", "bounded_type"),
        ("BANGEQ", "!="),
        ("DynamicType", "dynamic_type"),
        ("DOTDOT", ".."),
        ("TokenTreeRepeat1", "token_tree_repeat1"),
        ("ArgumentsRepeat1", "arguments_repeat1"),
        ("TryExpression", "try_expression"),
        ("Enum", "enum"),
        ("RBRACE", "}"),
        ("LT", "<"),
        ("GTGTEQ", ">>="),
        ("ReferenceType", "reference_type"),
        ("TupleTypeRepeat1", "tuple_type_repeat1"),
        ("RangePattern", "range_pattern"),
        ("FieldExpression", "field_expression"),
        ("PrimitiveType17", "primitive_type"),
        ("MacroDefinition", "macro_definition"),
    ]),
};

impl From<Rust> for &str {
    #[inline(always)]
    fn from(grammar: Rust) -> &'static str {
        KEYS.get(grammar.to_string().as_str()).unwrap()
    }
}

impl From<u16> for Rust {
    #[inline(always)]
    fn from(x: u16) -> Self {
        num::FromPrimitive::from_u16(x).unwrap_or(Self::Error)
    }
}

// Rust == u16
impl PartialEq<u16> for Rust {
    #[inline(always)]
    fn eq(&self, x: &u16) -> bool {
        *self == Rust::from(*x)
    }
}

// u16 == Rust
impl PartialEq<Rust> for u16 {
    #[inline(always)]
    fn eq(&self, x: &Rust) -> bool {
        *x == *self
    }
}
