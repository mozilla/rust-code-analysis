// Code generated; DO NOT EDIT.

#[derive(Clone, Debug, PartialEq, FromPrimitive)]
pub enum Mozjs {
    End = 0,
    Identifier = 1,
    HashBangLine = 2,
    Export = 3,
    STAR = 4,
    Default = 5,
    LBRACE = 6,
    COMMA = 7,
    RBRACE = 8,
    As = 9,
    Import2 = 10,
    From = 11,
    Var = 12,
    Let = 13,
    Const = 14,
    Else = 15,
    If = 16,
    Switch = 17,
    For = 18,
    LPAREN = 19,
    RPAREN = 20,
    Await = 21,
    In = 22,
    Of = 23,
    While = 24,
    Do = 25,
    Try = 26,
    With = 27,
    Break = 28,
    Continue = 29,
    Debugger = 30,
    Return = 31,
    Throw = 32,
    SEMI = 33,
    COLON = 34,
    Case = 35,
    Catch = 36,
    Finally = 37,
    Yield = 38,
    EQ = 39,
    LBRACK = 40,
    RBRACK = 41,
    LT = 42,
    GT = 43,
    SLASH = 44,
    JsxText = 45,
    Identifier2 = 46,
    DOT = 47,
    Class2 = 48,
    Extends = 49,
    Async = 50,
    Function2 = 51,
    EQGT = 52,
    QMARKDOT = 53,
    New = 54,
    PLUSEQ = 55,
    DASHEQ = 56,
    STAREQ = 57,
    SLASHEQ = 58,
    PERCENTEQ = 59,
    CARETEQ = 60,
    AMPEQ = 61,
    PIPEEQ = 62,
    GTGTEQ = 63,
    GTGTGTEQ = 64,
    LTLTEQ = 65,
    STARSTAREQ = 66,
    AMPAMPEQ = 67,
    PIPEPIPEEQ = 68,
    QMARKQMARKEQ = 69,
    DOTDOTDOT = 70,
    QMARK = 71,
    AMPAMP = 72,
    PIPEPIPE = 73,
    GTGT = 74,
    GTGTGT = 75,
    LTLT = 76,
    AMP = 77,
    CARET = 78,
    PIPE = 79,
    PLUS = 80,
    DASH = 81,
    PERCENT = 82,
    STARSTAR = 83,
    LTEQ = 84,
    EQEQ = 85,
    EQEQEQ = 86,
    BANGEQ = 87,
    BANGEQEQ = 88,
    GTEQ = 89,
    QMARKQMARK = 90,
    Instanceof = 91,
    BANG = 92,
    TILDE = 93,
    Typeof = 94,
    Void = 95,
    Delete = 96,
    PLUSPLUS = 97,
    DASHDASH = 98,
    DQUOTE = 99,
    StringToken1 = 100,
    SQUOTE = 101,
    StringToken2 = 102,
    EscapeSequence = 103,
    Comment = 104,
    BQUOTE = 105,
    DOLLARLBRACE = 106,
    SLASH2 = 107,
    RegexPattern = 108,
    RegexFlags = 109,
    Number = 110,
    Target = 111,
    This = 112,
    Super = 113,
    True = 114,
    False = 115,
    Null = 116,
    Undefined = 117,
    AT = 118,
    Static = 119,
    Get = 120,
    Set = 121,
    Preproc = 122,
    AutomaticSemicolon = 123,
    TemplateChars = 124,
    Program = 125,
    ExportStatement = 126,
    ExportClause = 127,
    ExportSpecifier = 128,
    Declaration = 129,
    Import = 130,
    ImportStatement = 131,
    ImportClause = 132,
    FromClause = 133,
    NamespaceImport = 134,
    NamedImports = 135,
    ExpressionStatement = 136,
    VariableDeclaration = 137,
    LexicalDeclaration = 138,
    VariableDeclarator = 139,
    StatementBlock = 140,
    ElseClause = 141,
    IfStatement = 142,
    SwitchStatement = 143,
    ForStatement = 144,
    ForInStatement = 145,
    ForHeader = 146,
    WhileStatement = 147,
    DoStatement = 148,
    TryStatement = 149,
    WithStatement = 150,
    BreakStatement = 151,
    ContinueStatement = 152,
    DebuggerStatement = 153,
    ReturnStatement = 154,
    ThrowStatement = 155,
    EmptyStatement = 156,
    LabeledStatement = 157,
    SwitchBody = 158,
    SwitchCase = 159,
    SwitchDefault = 160,
    CatchClause = 161,
    FinallyClause = 162,
    ParenthesizedExpression = 163,
    Expression = 164,
    PrimaryExpression = 165,
    YieldExpression = 166,
    Object = 167,
    ObjectPattern = 168,
    AssignmentPattern = 169,
    ObjectAssignmentPattern = 170,
    Array = 171,
    ArrayPattern = 172,
    JsxElement = 173,
    JsxFragment = 174,
    JsxExpression = 175,
    JsxOpeningElement = 176,
    NestedIdentifier = 177,
    JsxNamespaceName = 178,
    JsxClosingElement = 179,
    JsxSelfClosingElement = 180,
    JsxAttribute = 181,
    Class = 182,
    ClassDeclaration = 183,
    ClassHeritage = 184,
    Function = 185,
    FunctionDeclaration = 186,
    GeneratorFunction = 187,
    GeneratorFunctionDeclaration = 188,
    ArrowFunction = 189,
    CallExpression = 190,
    NewExpression = 191,
    AwaitExpression = 192,
    MemberExpression = 193,
    SubscriptExpression = 194,
    AssignmentExpression = 195,
    AugmentedAssignmentLhs = 196,
    AugmentedAssignmentExpression = 197,
    Initializer = 198,
    DestructuringPattern = 199,
    SpreadElement = 200,
    TernaryExpression = 201,
    BinaryExpression = 202,
    UnaryExpression = 203,
    UpdateExpression = 204,
    SequenceExpression = 205,
    String = 206,
    TemplateString = 207,
    TemplateSubstitution = 208,
    Regex = 209,
    MetaProperty = 210,
    Arguments = 211,
    Decorator = 212,
    MemberExpression2 = 213,
    CallExpression2 = 214,
    ClassBody = 215,
    PublicFieldDefinition = 216,
    FormalParameters = 217,
    Pattern = 218,
    RestPattern = 219,
    MethodDefinition = 220,
    Pair = 221,
    PairPattern = 222,
    PropertyName = 223,
    ComputedPropertyName = 224,
    ProgramRepeat1 = 225,
    ExportStatementRepeat1 = 226,
    ExportClauseRepeat1 = 227,
    NamedImportsRepeat1 = 228,
    VariableDeclarationRepeat1 = 229,
    SwitchBodyRepeat1 = 230,
    ObjectRepeat1 = 231,
    ObjectPatternRepeat1 = 232,
    ArrayRepeat1 = 233,
    ArrayPatternRepeat1 = 234,
    JsxElementRepeat1 = 235,
    JsxOpeningElementRepeat1 = 236,
    StringRepeat1 = 237,
    StringRepeat2 = 238,
    TemplateStringRepeat1 = 239,
    ClassBodyRepeat1 = 240,
    FormalParametersRepeat1 = 241,
    ImportSpecifier = 242,
    PropertyIdentifier = 243,
    ShorthandPropertyIdentifier = 244,
    ShorthandPropertyIdentifierPattern = 245,
    StatementIdentifier = 246,
    Error = 247,
}

impl std::fmt::Display for Mozjs {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{:?}", self)
    }
}

#[allow(clippy::unreadable_literal)]
static KEYS: phf::Map<&'static str, &'static str> = ::phf::Map {
    key: 3347381344252206323,
    disps: ::phf::Slice::Static(&[
        (0, 30),
        (4, 73),
        (0, 3),
        (0, 5),
        (0, 223),
        (0, 231),
        (0, 1),
        (10, 152),
        (0, 191),
        (0, 1),
        (0, 10),
        (0, 1),
        (2, 192),
        (2, 131),
        (0, 0),
        (0, 0),
        (0, 20),
        (0, 1),
        (4, 188),
        (0, 200),
        (5, 103),
        (0, 46),
        (0, 1),
        (0, 3),
        (0, 15),
        (2, 15),
        (0, 63),
        (0, 107),
        (0, 2),
        (0, 27),
        (0, 44),
        (0, 215),
        (0, 35),
        (1, 17),
        (0, 37),
        (15, 133),
        (0, 167),
        (1, 214),
        (2, 11),
        (0, 148),
        (0, 1),
        (8, 65),
        (8, 85),
        (0, 52),
        (1, 15),
        (27, 108),
        (0, 54),
        (26, 121),
        (0, 38),
        (6, 7),
    ]),
    entries: ::phf::Slice::Static(&[
        ("Expression", "expression"),
        ("HashBangLine", "hash_bang_line"),
        ("SLASHEQ", "/="),
        ("RPAREN", ")"),
        ("PLUSPLUS", "++"),
        ("ImportClause", "import_clause"),
        ("Extends", "extends"),
        ("COMMA", ","),
        ("RestPattern", "rest_pattern"),
        ("AugmentedAssignmentLhs", "_augmented_assignment_lhs"),
        ("ClassHeritage", "class_heritage"),
        ("Number", "number"),
        ("ParenthesizedExpression", "parenthesized_expression"),
        ("LTEQ", "<="),
        (
            "GeneratorFunctionDeclaration",
            "generator_function_declaration",
        ),
        ("Super", "super"),
        ("RegexPattern", "regex_pattern"),
        ("Else", "else"),
        ("FormalParametersRepeat1", "formal_parameters_repeat1"),
        ("Program", "program"),
        ("Let", "let"),
        ("ArrayPatternRepeat1", "array_pattern_repeat1"),
        ("SwitchCase", "switch_case"),
        ("Import2", "import"),
        ("BANGEQ", "!="),
        ("Identifier2", "identifier"),
        ("RBRACE", "}"),
        ("Null", "null"),
        ("MemberExpression", "member_expression"),
        ("Error", "ERROR"),
        ("Case", "case"),
        ("ClassBody", "class_body"),
        ("AMP", "&"),
        ("UnaryExpression", "unary_expression"),
        ("LabeledStatement", "labeled_statement"),
        ("DQUOTE", "\""),
        ("Break", "break"),
        ("PublicFieldDefinition", "public_field_definition"),
        ("PLUS", "+"),
        ("While", "while"),
        ("ProgramRepeat1", "program_repeat1"),
        ("ExportClauseRepeat1", "export_clause_repeat1"),
        ("JsxClosingElement", "jsx_closing_element"),
        ("False", "false"),
        ("Static", "static"),
        ("JsxSelfClosingElement", "jsx_self_closing_element"),
        ("SwitchBodyRepeat1", "switch_body_repeat1"),
        ("Do", "do"),
        ("NestedIdentifier", "nested_identifier"),
        ("JsxExpression", "jsx_expression"),
        ("WhileStatement", "while_statement"),
        ("NamedImportsRepeat1", "named_imports_repeat1"),
        ("EQGT", "=>"),
        ("PIPEPIPEEQ", "||="),
        ("New", "new"),
        ("End", "end"),
        ("UpdateExpression", "update_expression"),
        ("Function2", "function"),
        ("GTEQ", ">="),
        ("Get", "get"),
        ("BQUOTE", "`"),
        ("Target", "target"),
        ("This", "this"),
        ("DebuggerStatement", "debugger_statement"),
        ("SwitchBody", "switch_body"),
        ("GTGT", ">>"),
        ("ExportClause", "export_clause"),
        ("Await", "await"),
        ("Arguments", "arguments"),
        ("Finally", "finally"),
        ("STAR", "*"),
        ("Default", "default"),
        ("NamespaceImport", "namespace_import"),
        ("SubscriptExpression", "subscript_expression"),
        ("LexicalDeclaration", "lexical_declaration"),
        ("LPAREN", "("),
        ("ExportStatement", "export_statement"),
        ("QMARKQMARKEQ", "??="),
        ("Function", "function"),
        (
            "ShorthandPropertyIdentifierPattern",
            "shorthand_property_identifier_pattern",
        ),
        ("LTLT", "<<"),
        ("DASH", "-"),
        ("FormalParameters", "formal_parameters"),
        ("STARSTAR", "**"),
        ("ArrowFunction", "arrow_function"),
        ("From", "from"),
        ("EQEQEQ", "==="),
        ("COLON", ":"),
        ("Declaration", "declaration"),
        ("Const", "const"),
        ("FromClause", "_from_clause"),
        ("PropertyName", "_property_name"),
        ("Debugger", "debugger"),
        ("PIPEPIPE", "||"),
        ("Continue", "continue"),
        ("STAREQ", "*="),
        ("If", "if"),
        ("EQEQ", "=="),
        ("SpreadElement", "spread_element"),
        ("Instanceof", "instanceof"),
        ("JsxOpeningElementRepeat1", "jsx_opening_element_repeat1"),
        ("TernaryExpression", "ternary_expression"),
        ("NewExpression", "new_expression"),
        ("True", "true"),
        ("PrimaryExpression", "primary_expression"),
        ("PERCENTEQ", "%="),
        ("Set", "set"),
        ("ContinueStatement", "continue_statement"),
        ("MetaProperty", "meta_property"),
        ("LBRACE", "{"),
        (
            "AugmentedAssignmentExpression",
            "augmented_assignment_expression",
        ),
        ("DoStatement", "do_statement"),
        ("CARET", "^"),
        ("TemplateString", "template_string"),
        ("VariableDeclarationRepeat1", "variable_declaration_repeat1"),
        ("StatementIdentifier", "statement_identifier"),
        ("SQUOTE", "'"),
        ("Yield", "yield"),
        ("MemberExpression2", "member_expression"),
        ("Typeof", "typeof"),
        ("Initializer", "_initializer"),
        ("AMPAMPEQ", "&&="),
        ("DASHEQ", "-="),
        ("JsxText", "jsx_text"),
        ("JsxNamespaceName", "jsx_namespace_name"),
        ("AMPAMP", "&&"),
        ("Catch", "catch"),
        ("ObjectPatternRepeat1", "object_pattern_repeat1"),
        ("JsxOpeningElement", "jsx_opening_element"),
        ("Regex", "regex"),
        ("JsxFragment", "jsx_fragment"),
        ("Import", "import"),
        ("ForInStatement", "for_in_statement"),
        ("Object", "object"),
        ("CatchClause", "catch_clause"),
        ("With", "with"),
        ("EmptyStatement", "empty_statement"),
        ("DOTDOTDOT", "..."),
        ("ExpressionStatement", "expression_statement"),
        ("BANG", "!"),
        ("PERCENT", "%"),
        ("LT", "<"),
        ("StringToken2", "string_token2"),
        ("ObjectAssignmentPattern", "object_assignment_pattern"),
        ("QMARK", "?"),
        ("TemplateSubstitution", "template_substitution"),
        ("YieldExpression", "yield_expression"),
        ("Pair", "pair"),
        ("QMARKQMARK", "??"),
        ("JsxElement", "jsx_element"),
        ("AutomaticSemicolon", "_automatic_semicolon"),
        ("MethodDefinition", "method_definition"),
        (
            "ShorthandPropertyIdentifier",
            "shorthand_property_identifier",
        ),
        ("Class2", "class"),
        ("PIPEEQ", "|="),
        ("Void", "void"),
        ("For", "for"),
        ("CallExpression2", "call_expression"),
        ("Of", "of"),
        ("ImportStatement", "import_statement"),
        ("CARETEQ", "^="),
        ("IfStatement", "if_statement"),
        ("TemplateChars", "_template_chars"),
        ("Switch", "switch"),
        ("AwaitExpression", "await_expression"),
        ("DOLLARLBRACE", "${"),
        ("JsxElementRepeat1", "jsx_element_repeat1"),
        ("LBRACK", "["),
        ("QMARKDOT", "?."),
        ("Async", "async"),
        ("WithStatement", "with_statement"),
        ("CallExpression", "call_expression"),
        ("Var", "var"),
        ("ReturnStatement", "return_statement"),
        ("SEMI", ";"),
        ("BANGEQEQ", "!=="),
        ("GT", ">"),
        ("Preproc", "preproc"),
        ("Decorator", "decorator"),
        ("GTGTGTEQ", ">>>="),
        ("StatementBlock", "statement_block"),
        ("ExportSpecifier", "export_specifier"),
        ("Delete", "delete"),
        ("VariableDeclaration", "variable_declaration"),
        ("StringToken1", "string_token1"),
        ("STARSTAREQ", "**="),
        ("DOT", "."),
        ("ElseClause", "else_clause"),
        ("String", "string"),
        ("ComputedPropertyName", "computed_property_name"),
        ("DASHDASH", "--"),
        ("RegexFlags", "regex_flags"),
        ("ArrayPattern", "array_pattern"),
        ("RBRACK", "]"),
        ("GeneratorFunction", "generator_function"),
        ("TryStatement", "try_statement"),
        ("SwitchDefault", "switch_default"),
        ("SwitchStatement", "switch_statement"),
        ("Return", "return"),
        ("Export", "export"),
        ("ClassDeclaration", "class_declaration"),
        ("JsxAttribute", "jsx_attribute"),
        ("EQ", "="),
        ("SLASH", "/"),
        ("PairPattern", "pair_pattern"),
        ("StringRepeat1", "string_repeat1"),
        ("BinaryExpression", "binary_expression"),
        ("FinallyClause", "finally_clause"),
        ("Array", "array"),
        ("SLASH2", "/"),
        ("ObjectRepeat1", "object_repeat1"),
        ("LTLTEQ", "<<="),
        ("SequenceExpression", "sequence_expression"),
        ("TILDE", "~"),
        ("AssignmentExpression", "assignment_expression"),
        ("GTGTGT", ">>>"),
        ("FunctionDeclaration", "function_declaration"),
        ("VariableDeclarator", "variable_declarator"),
        ("NamedImports", "named_imports"),
        ("AssignmentPattern", "assignment_pattern"),
        ("Identifier", "identifier"),
        ("ArrayRepeat1", "array_repeat1"),
        ("Pattern", "pattern"),
        ("Try", "try"),
        ("PropertyIdentifier", "property_identifier"),
        ("ImportSpecifier", "import_specifier"),
        ("As", "as"),
        ("EscapeSequence", "escape_sequence"),
        ("BreakStatement", "break_statement"),
        ("ThrowStatement", "throw_statement"),
        ("AT", "@"),
        ("Undefined", "undefined"),
        ("In", "in"),
        ("AMPEQ", "&="),
        ("Comment", "comment"),
        ("DestructuringPattern", "_destructuring_pattern"),
        ("ObjectPattern", "object_pattern"),
        ("ForStatement", "for_statement"),
        ("Class", "class"),
        ("ForHeader", "_for_header"),
        ("GTGTEQ", ">>="),
        ("Throw", "throw"),
        ("ExportStatementRepeat1", "export_statement_repeat1"),
        ("TemplateStringRepeat1", "template_string_repeat1"),
        ("ClassBodyRepeat1", "class_body_repeat1"),
        ("StringRepeat2", "string_repeat2"),
        ("PIPE", "|"),
        ("PLUSEQ", "+="),
    ]),
};

impl From<Mozjs> for &str {
    #[inline(always)]
    fn from(grammar: Mozjs) -> &'static str {
        KEYS.get(grammar.to_string().as_str()).unwrap()
    }
}

impl From<u16> for Mozjs {
    #[inline(always)]
    fn from(x: u16) -> Self {
        num::FromPrimitive::from_u16(x).unwrap_or(Self::Error)
    }
}

// Mozjs == u16
impl PartialEq<u16> for Mozjs {
    #[inline(always)]
    fn eq(&self, x: &u16) -> bool {
        *self == Mozjs::from(*x)
    }
}

// u16 == Mozjs
impl PartialEq<Mozjs> for u16 {
    #[inline(always)]
    fn eq(&self, x: &Mozjs) -> bool {
        *x == *self
    }
}
