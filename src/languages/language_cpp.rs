// Code generated; DO NOT EDIT.

#[derive(Clone, Debug, PartialEq, FromPrimitive)]
pub enum Cpp {
    End = 0,
    Identifier = 1,
    HASHinclude = 2,
    LF = 3,
    HASHdefine = 4,
    LPAREN = 5,
    DOTDOTDOT = 6,
    COMMA = 7,
    RPAREN = 8,
    HASHif = 9,
    HASHendif = 10,
    HASHifdef = 11,
    HASHifndef = 12,
    HASHelse = 13,
    HASHelif = 14,
    PreprocDirective = 15,
    PreprocArg = 16,
    LPAREN2 = 17,
    Defined = 18,
    BANG = 19,
    TILDE = 20,
    DASH = 21,
    PLUS = 22,
    STAR = 23,
    SLASH = 24,
    PERCENT = 25,
    PIPEPIPE = 26,
    AMPAMP = 27,
    PIPE = 28,
    CARET = 29,
    AMP = 30,
    EQEQ = 31,
    BANGEQ = 32,
    GT = 33,
    GTEQ = 34,
    LTEQ = 35,
    LT = 36,
    LTLT = 37,
    GTGT = 38,
    SEMI = 39,
    Typedef = 40,
    Extern = 41,
    Attribute2 = 42,
    COLONCOLON = 43,
    LBRACKLBRACK = 44,
    RBRACKRBRACK = 45,
    Declspec = 46,
    Based = 47,
    Cdecl = 48,
    Clrcall = 49,
    Stdcall = 50,
    Fastcall = 51,
    Thiscall = 52,
    Vectorcall = 53,
    MsRestrictModifier = 54,
    MsUnsignedPtrModifier = 55,
    MsSignedPtrModifier = 56,
    Unaligned = 57,
    Unaligned2 = 58,
    LBRACE = 59,
    RBRACE = 60,
    LBRACK = 61,
    RBRACK = 62,
    EQ = 63,
    Static = 64,
    Register = 65,
    Inline = 66,
    ThreadLocal = 67,
    Const = 68,
    Volatile = 69,
    Restrict = 70,
    Atomic = 71,
    Mutable = 72,
    Constexpr = 73,
    Signed = 74,
    Unsigned = 75,
    Long = 76,
    Short = 77,
    PrimitiveType = 78,
    Enum = 79,
    Class = 80,
    Struct = 81,
    Union = 82,
    COLON = 83,
    If = 84,
    Else = 85,
    Switch = 86,
    Case = 87,
    Default = 88,
    While = 89,
    Do = 90,
    For = 91,
    Return = 92,
    Break = 93,
    Continue = 94,
    Goto = 95,
    QMARK = 96,
    STAREQ = 97,
    SLASHEQ = 98,
    PERCENTEQ = 99,
    PLUSEQ = 100,
    DASHEQ = 101,
    LTLTEQ = 102,
    GTGTEQ = 103,
    AMPEQ = 104,
    CARETEQ = 105,
    PIPEEQ = 106,
    DASHDASH = 107,
    PLUSPLUS = 108,
    Sizeof = 109,
    DOT = 110,
    DASHGT = 111,
    NumberLiteral = 112,
    LSQUOTE = 113,
    USQUOTE = 114,
    USQUOTE2 = 115,
    U8SQUOTE = 116,
    SQUOTE = 117,
    CharLiteralToken1 = 118,
    LDQUOTE = 119,
    UDQUOTE = 120,
    UDQUOTE2 = 121,
    U8DQUOTE = 122,
    DQUOTE = 123,
    StringLiteralToken1 = 124,
    EscapeSequence = 125,
    SystemLibString = 126,
    True = 127,
    False = 128,
    Null = 129,
    Comment = 130,
    Decltype2 = 131,
    Final = 132,
    Override = 133,
    Virtual = 134,
    Explicit = 135,
    Public = 136,
    Private = 137,
    Protected = 138,
    Auto = 139,
    Typename = 140,
    Template = 141,
    GT2 = 142,
    Operator = 143,
    Delete = 144,
    Friend = 145,
    Noexcept2 = 146,
    Throw = 147,
    Namespace = 148,
    Using = 149,
    StaticAssert = 150,
    CoReturn = 151,
    CoYield = 152,
    Try = 153,
    Catch = 154,
    CoAwait = 155,
    New = 156,
    OperatorName = 157,
    This = 158,
    Nullptr = 159,
    LiteralSuffix = 160,
    AloneMacro = 161,
    AloneMacroCallToken1 = 162,
    CACHETRYINSPECT = 163,
    CACHETRYUNWRAP = 164,
    FORWARD = 165,
    FORWARDSETATTRIBUTE = 166,
    IDBTRYINSPECT = 167,
    IDBTRYUNWRAP = 168,
    LSTRYINSPECT = 169,
    LSTRYUNWRAP = 170,
    SDBTRYINSPECT = 171,
    SDBTRYUNWRAP = 172,
    PSGET = 173,
    PSGETANDSET = 174,
    PSGETLOCKLESS = 175,
    QMTRYINSPECT = 176,
    QMNOTEONLYTRYUNWRAP = 177,
    QMTRYUNWRAP = 178,
    QMWARNONLYTRYUNWRAP = 179,
    MOZDECLUSEGUARDOBJECTNOTIFIER = 180,
    MOZALLOCATOR = 181,
    MOZALLOWTEMPORARY = 182,
    MOZALWAYSINLINE = 183,
    MOZALWAYSINLINEEVENDEBUG = 184,
    MOZASANBLACKLIST = 185,
    MOZCANRUNSCRIPT = 186,
    MOZCANRUNSCRIPTBOUNDARY = 187,
    MOZCANRUNSCRIPTFORDEFINITION = 188,
    MOZCOLD = 189,
    MOZFALLTHROUGH = 190,
    MOZFORMATPRINTF = 191,
    MOZHAVEANALYZERNORETURN = 192,
    MOZHAVEASANBLACKLIST = 193,
    MOZHAVENEVERINLINE = 194,
    MOZHAVENORETURN = 195,
    MOZHAVENORETURNPTR = 196,
    MOZHAVENOSANITIZEATTR = 197,
    MOZHAVESIGNEDOVERFLOWSANITIZEATTR = 198,
    MOZHAVEUNSIGNEDOVERFLOWSANITIZEATTR = 199,
    MOZHEAPALLOCATOR = 200,
    MOZHEAPCLASS = 201,
    MOZIMPLICIT = 202,
    MOZINHERITTYPEANNOTATIONSFROMTEMPLATEARGS = 203,
    MOZINITOUTSIDECTOR = 204,
    MOZISCLASSINIT = 205,
    MOZISREFPTR = 206,
    MOZISSMARTPTRTOREFCOUNTED = 207,
    MOZMAYBEUNUSED = 208,
    MOZMAYCALLAFTERMUSTRETURN = 209,
    MOZMUSTOVERRIDE = 210,
    MOZMUSTRETURNFROMCALLERIFTHISISARG = 211,
    MOZMUSTUSE = 212,
    MOZMUSTUSETYPE = 213,
    MOZNEEDSMEMMOVABLEMEMBERS = 214,
    MOZNEEDSMEMMOVABLETYPE = 215,
    MOZNEEDSNOVTABLETYPE = 216,
    MOZNEVERINLINE = 217,
    MOZNEVERINLINEDEBUG = 218,
    MOZNONHEAPCLASS = 219,
    MOZNONNULL = 220,
    MOZNONNULLRETURN = 221,
    MOZNONAUTOABLE = 222,
    MOZNONMEMMOVABLE = 223,
    MOZNONOWNINGREF = 224,
    MOZNONPARAM = 225,
    MOZNONTEMPORARYCLASS = 226,
    MOZNORETURN = 227,
    MOZNORETURNPTR = 228,
    MOZNOADDREFRELEASEONRETURN = 229,
    MOZNOARITHMETICEXPRINARGUMENT = 230,
    MOZNODANGLINGONTEMPORARIES = 231,
    MOZNOSANITIZESIGNEDOVERFLOW = 232,
    MOZNOSANITIZEUNSIGNEDOVERFLOW = 233,
    MOZONLYUSEDTOAVOIDSTATICCONSTRUCTORS = 234,
    MOZOWNINGREF = 235,
    MOZPOPDISABLENONTRIVIALUNIONWARNINGS = 236,
    MOZPRETENDNORETURNFORSTATICANALYSIS = 237,
    MOZPUSHDISABLENONTRIVIALUNIONWARNINGS = 238,
    MOZRAII = 239,
    MOZREQUIREDBASEMETHOD = 240,
    MOZSTACKCLASS = 241,
    MOZSTATICCLASS = 242,
    MOZSTATICLOCALCLASS = 243,
    MOZTEMPORARYCLASS = 244,
    MOZTRIVIALCTORDTOR = 245,
    MOZTSANBLACKLIST = 246,
    MOZUNSAFEREF = 247,
    MOZXPCOMABI = 248,
    JSPUBLICAPI = 249,
    RawStringLiteral = 250,
    TranslationUnit = 251,
    PreprocInclude = 252,
    PreprocDef = 253,
    PreprocFunctionDef = 254,
    PreprocParams = 255,
    PreprocCall = 256,
    PreprocIf = 257,
    PreprocIfdef = 258,
    PreprocElse = 259,
    PreprocElif = 260,
    PreprocIf2 = 261,
    PreprocIfdef2 = 262,
    PreprocElse2 = 263,
    PreprocElif2 = 264,
    PreprocExpression = 265,
    ParenthesizedExpression = 266,
    PreprocDefined = 267,
    UnaryExpression = 268,
    CallExpression = 269,
    ArgumentList = 270,
    BinaryExpression = 271,
    FunctionDefinition = 272,
    Declaration = 273,
    TypeDefinition = 274,
    DeclarationModifiers = 275,
    DeclarationSpecifiers = 276,
    LinkageSpecification = 277,
    AttributeSpecifier = 278,
    Attribute = 279,
    AttributeDeclaration = 280,
    MsDeclspecModifier = 281,
    MsBasedModifier = 282,
    MsCallModifier = 283,
    MsUnalignedPtrModifier = 284,
    MsPointerModifier = 285,
    DeclarationList = 286,
    Declarator = 287,
    FieldDeclarator = 288,
    TypeDeclarator = 289,
    AbstractDeclarator = 290,
    ParenthesizedDeclarator = 291,
    ParenthesizedDeclarator2 = 292,
    ParenthesizedDeclarator3 = 293,
    AbstractParenthesizedDeclarator = 294,
    AttributedDeclarator = 295,
    AttributedDeclarator2 = 296,
    AttributedDeclarator3 = 297,
    PointerDeclarator = 298,
    PointerDeclarator2 = 299,
    PointerDeclarator3 = 300,
    AbstractPointerDeclarator = 301,
    FunctionDeclarator = 302,
    FunctionDeclarator2 = 303,
    FunctionDeclarator3 = 304,
    AbstractFunctionDeclarator = 305,
    ArrayDeclarator = 306,
    ArrayDeclarator2 = 307,
    ArrayDeclarator3 = 308,
    AbstractArrayDeclarator = 309,
    InitDeclarator = 310,
    CompoundStatement = 311,
    StorageClassSpecifier = 312,
    TypeQualifier = 313,
    TypeSpecifier = 314,
    SizedTypeSpecifier = 315,
    EnumSpecifier = 316,
    EnumeratorList = 317,
    StructSpecifier = 318,
    UnionSpecifier = 319,
    FieldDeclarationList = 320,
    FieldDeclarationListItem = 321,
    FieldDeclaration = 322,
    BitfieldClause = 323,
    Enumerator = 324,
    ParameterList = 325,
    ParameterDeclaration = 326,
    AttributedStatement = 327,
    AttributedStatement2 = 328,
    LabeledStatement = 329,
    ExpressionStatement = 330,
    IfStatement = 331,
    SwitchStatement = 332,
    CaseStatement = 333,
    WhileStatement = 334,
    DoStatement = 335,
    ForStatement = 336,
    ReturnStatement = 337,
    BreakStatement = 338,
    ContinueStatement = 339,
    GotoStatement = 340,
    Expression = 341,
    CommaExpression = 342,
    ConditionalExpression = 343,
    AssignmentExpression = 344,
    PointerExpression = 345,
    UnaryExpression2 = 346,
    BinaryExpression2 = 347,
    UpdateExpression = 348,
    CastExpression = 349,
    TypeDescriptor = 350,
    SizeofExpression = 351,
    SubscriptExpression = 352,
    CallExpression2 = 353,
    ArgumentList2 = 354,
    FieldExpression = 355,
    CompoundLiteralExpression = 356,
    ParenthesizedExpression2 = 357,
    InitializerList = 358,
    InitializerPair = 359,
    SubscriptDesignator = 360,
    FieldDesignator = 361,
    CharLiteral = 362,
    ConcatenatedString = 363,
    StringLiteral = 364,
    EmptyDeclaration = 365,
    Decltype = 366,
    ClassSpecifier = 367,
    ClassName = 368,
    VirtualSpecifier = 369,
    VirtualFunctionSpecifier = 370,
    ExplicitFunctionSpecifier = 371,
    BaseClassClause = 372,
    EnumBaseClause = 373,
    DependentType = 374,
    TemplateDeclaration = 375,
    TemplateInstantiation = 376,
    TemplateParameterList = 377,
    TypeParameterDeclaration = 378,
    VariadicTypeParameterDeclaration = 379,
    OptionalTypeParameterDeclaration = 380,
    TemplateTemplateParameterDeclaration = 381,
    OptionalParameterDeclaration = 382,
    VariadicParameterDeclaration = 383,
    VariadicDeclarator = 384,
    ReferenceDeclarator = 385,
    OperatorCast = 386,
    FieldInitializerList = 387,
    FieldInitializer = 388,
    FunctionDefinition2 = 389,
    ConstructorSpecifiers = 390,
    FunctionDefinition3 = 391,
    Declaration2 = 392,
    FunctionDefinition4 = 393,
    Declaration3 = 394,
    DefaultMethodClause = 395,
    DeleteMethodClause = 396,
    FriendDeclaration = 397,
    AccessSpecifier = 398,
    ReferenceDeclarator2 = 399,
    ReferenceDeclarator3 = 400,
    AbstractReferenceDeclarator = 401,
    StructuredBindingDeclarator = 402,
    RefQualifier = 403,
    TrailingReturnType = 404,
    Noexcept = 405,
    ThrowSpecifier = 406,
    TemplateType = 407,
    TemplateMethod = 408,
    TemplateFunction = 409,
    TemplateArgumentList = 410,
    NamespaceDefinition = 411,
    NamespaceDefinitionName = 412,
    UsingDeclaration = 413,
    AliasDeclaration = 414,
    StaticAssertDeclaration = 415,
    ConditionClause = 416,
    Declaration4 = 417,
    ForRangeLoop = 418,
    CoReturnStatement = 419,
    CoYieldStatement = 420,
    ThrowStatement = 421,
    TryStatement = 422,
    CatchClause = 423,
    CoAwaitExpression = 424,
    NewExpression = 425,
    NewDeclarator = 426,
    DeleteExpression = 427,
    LambdaExpression = 428,
    LambdaCaptureSpecifier = 429,
    LambdaDefaultCapture = 430,
    ParameterPackExpansion = 431,
    ParameterPackExpansion2 = 432,
    DestructorName = 433,
    DependentName = 434,
    DependentName2 = 435,
    DependentName3 = 436,
    ScopeResolution = 437,
    QualifiedIdentifier = 438,
    QualifiedIdentifier2 = 439,
    QualifiedIdentifier3 = 440,
    QualifiedIdentifier4 = 441,
    UserDefinedLiteral = 442,
    AloneMacroCall = 443,
    CallMacroWithDeclFirstArg = 444,
    MacroStatement = 445,
    MacroAnnotation = 446,
    TranslationUnitRepeat1 = 447,
    PreprocParamsRepeat1 = 448,
    PreprocIfInFieldDeclarationListRepeat1 = 449,
    PreprocArgumentListRepeat1 = 450,
    DeclarationRepeat1 = 451,
    TypeDefinitionRepeat1 = 452,
    TypeDefinitionRepeat2 = 453,
    DeclarationSpecifiersRepeat1 = 454,
    AttributeDeclarationRepeat1 = 455,
    AttributedDeclaratorRepeat1 = 456,
    PointerDeclaratorRepeat1 = 457,
    FunctionDeclaratorRepeat1 = 458,
    FunctionDeclaratorRepeat2 = 459,
    AbstractFunctionDeclaratorRepeat1 = 460,
    SizedTypeSpecifierRepeat1 = 461,
    EnumeratorListRepeat1 = 462,
    FieldDeclarationRepeat1 = 463,
    ParameterListRepeat1 = 464,
    CaseStatementRepeat1 = 465,
    ArgumentListRepeat1 = 466,
    InitializerListRepeat1 = 467,
    InitializerPairRepeat1 = 468,
    ConcatenatedStringRepeat1 = 469,
    StringLiteralRepeat1 = 470,
    ClassSpecifierRepeat1 = 471,
    BaseClassClauseRepeat1 = 472,
    TemplateParameterListRepeat1 = 473,
    FieldInitializerListRepeat1 = 474,
    OperatorCastDefinitionRepeat1 = 475,
    StructuredBindingDeclaratorRepeat1 = 476,
    ThrowSpecifierRepeat1 = 477,
    TemplateArgumentListRepeat1 = 478,
    TryStatementRepeat1 = 479,
    LambdaCaptureSpecifierRepeat1 = 480,
    AloneMacroCallRepeat1 = 481,
    FieldIdentifier = 482,
    NamespaceIdentifier = 483,
    StatementIdentifier = 484,
    TypeIdentifier = 485,
    Error = 486,
}

impl From<Cpp> for &'static str {
    #[inline(always)]
    fn from(tok: Cpp) -> Self {
        match tok {
            Cpp::End => "end",
            Cpp::Identifier => "identifier",
            Cpp::HASHinclude => "#include",
            Cpp::LF => "\n",
            Cpp::HASHdefine => "#define",
            Cpp::LPAREN => "(",
            Cpp::DOTDOTDOT => "...",
            Cpp::COMMA => ",",
            Cpp::RPAREN => ")",
            Cpp::HASHif => "#if",
            Cpp::HASHendif => "#endif",
            Cpp::HASHifdef => "#ifdef",
            Cpp::HASHifndef => "#ifndef",
            Cpp::HASHelse => "#else",
            Cpp::HASHelif => "#elif",
            Cpp::PreprocDirective => "preproc_directive",
            Cpp::PreprocArg => "preproc_arg",
            Cpp::LPAREN2 => "(",
            Cpp::Defined => "defined",
            Cpp::BANG => "!",
            Cpp::TILDE => "~",
            Cpp::DASH => "-",
            Cpp::PLUS => "+",
            Cpp::STAR => "*",
            Cpp::SLASH => "/",
            Cpp::PERCENT => "%",
            Cpp::PIPEPIPE => "||",
            Cpp::AMPAMP => "&&",
            Cpp::PIPE => "|",
            Cpp::CARET => "^",
            Cpp::AMP => "&",
            Cpp::EQEQ => "==",
            Cpp::BANGEQ => "!=",
            Cpp::GT => ">",
            Cpp::GTEQ => ">=",
            Cpp::LTEQ => "<=",
            Cpp::LT => "<",
            Cpp::LTLT => "<<",
            Cpp::GTGT => ">>",
            Cpp::SEMI => ";",
            Cpp::Typedef => "typedef",
            Cpp::Extern => "extern",
            Cpp::Attribute2 => "__attribute__",
            Cpp::COLONCOLON => "::",
            Cpp::LBRACKLBRACK => "[[",
            Cpp::RBRACKRBRACK => "]]",
            Cpp::Declspec => "__declspec",
            Cpp::Based => "__based",
            Cpp::Cdecl => "__cdecl",
            Cpp::Clrcall => "__clrcall",
            Cpp::Stdcall => "__stdcall",
            Cpp::Fastcall => "__fastcall",
            Cpp::Thiscall => "__thiscall",
            Cpp::Vectorcall => "__vectorcall",
            Cpp::MsRestrictModifier => "ms_restrict_modifier",
            Cpp::MsUnsignedPtrModifier => "ms_unsigned_ptr_modifier",
            Cpp::MsSignedPtrModifier => "ms_signed_ptr_modifier",
            Cpp::Unaligned => "_unaligned",
            Cpp::Unaligned2 => "__unaligned",
            Cpp::LBRACE => "{",
            Cpp::RBRACE => "}",
            Cpp::LBRACK => "[",
            Cpp::RBRACK => "]",
            Cpp::EQ => "=",
            Cpp::Static => "static",
            Cpp::Register => "register",
            Cpp::Inline => "inline",
            Cpp::ThreadLocal => "thread_local",
            Cpp::Const => "const",
            Cpp::Volatile => "volatile",
            Cpp::Restrict => "restrict",
            Cpp::Atomic => "_Atomic",
            Cpp::Mutable => "mutable",
            Cpp::Constexpr => "constexpr",
            Cpp::Signed => "signed",
            Cpp::Unsigned => "unsigned",
            Cpp::Long => "long",
            Cpp::Short => "short",
            Cpp::PrimitiveType => "primitive_type",
            Cpp::Enum => "enum",
            Cpp::Class => "class",
            Cpp::Struct => "struct",
            Cpp::Union => "union",
            Cpp::COLON => ":",
            Cpp::If => "if",
            Cpp::Else => "else",
            Cpp::Switch => "switch",
            Cpp::Case => "case",
            Cpp::Default => "default",
            Cpp::While => "while",
            Cpp::Do => "do",
            Cpp::For => "for",
            Cpp::Return => "return",
            Cpp::Break => "break",
            Cpp::Continue => "continue",
            Cpp::Goto => "goto",
            Cpp::QMARK => "?",
            Cpp::STAREQ => "*=",
            Cpp::SLASHEQ => "/=",
            Cpp::PERCENTEQ => "%=",
            Cpp::PLUSEQ => "+=",
            Cpp::DASHEQ => "-=",
            Cpp::LTLTEQ => "<<=",
            Cpp::GTGTEQ => ">>=",
            Cpp::AMPEQ => "&=",
            Cpp::CARETEQ => "^=",
            Cpp::PIPEEQ => "|=",
            Cpp::DASHDASH => "--",
            Cpp::PLUSPLUS => "++",
            Cpp::Sizeof => "sizeof",
            Cpp::DOT => ".",
            Cpp::DASHGT => "->",
            Cpp::NumberLiteral => "number_literal",
            Cpp::LSQUOTE => "L'",
            Cpp::USQUOTE => "u'",
            Cpp::USQUOTE2 => "U'",
            Cpp::U8SQUOTE => "u8'",
            Cpp::SQUOTE => "'",
            Cpp::CharLiteralToken1 => "char_literal_token1",
            Cpp::LDQUOTE => "L\"",
            Cpp::UDQUOTE => "u\"",
            Cpp::UDQUOTE2 => "U\"",
            Cpp::U8DQUOTE => "u8\"",
            Cpp::DQUOTE => "\"",
            Cpp::StringLiteralToken1 => "string_literal_token1",
            Cpp::EscapeSequence => "escape_sequence",
            Cpp::SystemLibString => "system_lib_string",
            Cpp::True => "true",
            Cpp::False => "false",
            Cpp::Null => "null",
            Cpp::Comment => "comment",
            Cpp::Decltype2 => "decltype",
            Cpp::Final => "final",
            Cpp::Override => "override",
            Cpp::Virtual => "virtual",
            Cpp::Explicit => "explicit",
            Cpp::Public => "public",
            Cpp::Private => "private",
            Cpp::Protected => "protected",
            Cpp::Auto => "auto",
            Cpp::Typename => "typename",
            Cpp::Template => "template",
            Cpp::GT2 => ">",
            Cpp::Operator => "operator",
            Cpp::Delete => "delete",
            Cpp::Friend => "friend",
            Cpp::Noexcept2 => "noexcept",
            Cpp::Throw => "throw",
            Cpp::Namespace => "namespace",
            Cpp::Using => "using",
            Cpp::StaticAssert => "static_assert",
            Cpp::CoReturn => "co_return",
            Cpp::CoYield => "co_yield",
            Cpp::Try => "try",
            Cpp::Catch => "catch",
            Cpp::CoAwait => "co_await",
            Cpp::New => "new",
            Cpp::OperatorName => "operator_name",
            Cpp::This => "this",
            Cpp::Nullptr => "nullptr",
            Cpp::LiteralSuffix => "literal_suffix",
            Cpp::AloneMacro => "alone_macro",
            Cpp::AloneMacroCallToken1 => "alone_macro_call_token1",
            Cpp::CACHETRYINSPECT => "CACHE_TRY_INSPECT",
            Cpp::CACHETRYUNWRAP => "CACHE_TRY_UNWRAP",
            Cpp::FORWARD => "FORWARD",
            Cpp::FORWARDSETATTRIBUTE => "FORWARD_SET_ATTRIBUTE",
            Cpp::IDBTRYINSPECT => "IDB_TRY_INSPECT",
            Cpp::IDBTRYUNWRAP => "IDB_TRY_UNWRAP",
            Cpp::LSTRYINSPECT => "LS_TRY_INSPECT",
            Cpp::LSTRYUNWRAP => "LS_TRY_UNWRAP",
            Cpp::SDBTRYINSPECT => "SDB_TRY_INSPECT",
            Cpp::SDBTRYUNWRAP => "SDB_TRY_UNWRAP",
            Cpp::PSGET => "PS_GET",
            Cpp::PSGETANDSET => "PS_GET_AND_SET",
            Cpp::PSGETLOCKLESS => "PS_GET_LOCKLESS",
            Cpp::QMTRYINSPECT => "QM_TRY_INSPECT",
            Cpp::QMNOTEONLYTRYUNWRAP => "QM_NOTEONLY_TRY_UNWRAP",
            Cpp::QMTRYUNWRAP => "QM_TRY_UNWRAP",
            Cpp::QMWARNONLYTRYUNWRAP => "QM_WARNONLY_TRY_UNWRAP",
            Cpp::MOZDECLUSEGUARDOBJECTNOTIFIER => "MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER",
            Cpp::MOZALLOCATOR => "MOZ_ALLOCATOR",
            Cpp::MOZALLOWTEMPORARY => "MOZ_ALLOW_TEMPORARY",
            Cpp::MOZALWAYSINLINE => "MOZ_ALWAYS_INLINE",
            Cpp::MOZALWAYSINLINEEVENDEBUG => "MOZ_ALWAYS_INLINE_EVEN_DEBUG",
            Cpp::MOZASANBLACKLIST => "MOZ_ASAN_BLACKLIST",
            Cpp::MOZCANRUNSCRIPT => "MOZ_CAN_RUN_SCRIPT",
            Cpp::MOZCANRUNSCRIPTBOUNDARY => "MOZ_CAN_RUN_SCRIPT_BOUNDARY",
            Cpp::MOZCANRUNSCRIPTFORDEFINITION => "MOZ_CAN_RUN_SCRIPT_FOR_DEFINITION",
            Cpp::MOZCOLD => "MOZ_COLD",
            Cpp::MOZFALLTHROUGH => "MOZ_FALLTHROUGH",
            Cpp::MOZFORMATPRINTF => "MOZ_FORMAT_PRINTF",
            Cpp::MOZHAVEANALYZERNORETURN => "MOZ_HAVE_ANALYZER_NORETURN",
            Cpp::MOZHAVEASANBLACKLIST => "MOZ_HAVE_ASAN_BLACKLIST",
            Cpp::MOZHAVENEVERINLINE => "MOZ_HAVE_NEVER_INLINE",
            Cpp::MOZHAVENORETURN => "MOZ_HAVE_NORETURN",
            Cpp::MOZHAVENORETURNPTR => "MOZ_HAVE_NORETURN_PTR",
            Cpp::MOZHAVENOSANITIZEATTR => "MOZ_HAVE_NO_SANITIZE_ATTR",
            Cpp::MOZHAVESIGNEDOVERFLOWSANITIZEATTR => "MOZ_HAVE_SIGNED_OVERFLOW_SANITIZE_ATTR",
            Cpp::MOZHAVEUNSIGNEDOVERFLOWSANITIZEATTR => "MOZ_HAVE_UNSIGNED_OVERFLOW_SANITIZE_ATTR",
            Cpp::MOZHEAPALLOCATOR => "MOZ_HEAP_ALLOCATOR",
            Cpp::MOZHEAPCLASS => "MOZ_HEAP_CLASS",
            Cpp::MOZIMPLICIT => "MOZ_IMPLICIT",
            Cpp::MOZINHERITTYPEANNOTATIONSFROMTEMPLATEARGS => {
                "MOZ_INHERIT_TYPE_ANNOTATIONS_FROM_TEMPLATE_ARGS"
            }
            Cpp::MOZINITOUTSIDECTOR => "MOZ_INIT_OUTSIDE_CTOR",
            Cpp::MOZISCLASSINIT => "MOZ_IS_CLASS_INIT",
            Cpp::MOZISREFPTR => "MOZ_IS_REFPTR",
            Cpp::MOZISSMARTPTRTOREFCOUNTED => "MOZ_IS_SMARTPTR_TO_REFCOUNTED",
            Cpp::MOZMAYBEUNUSED => "MOZ_MAYBE_UNUSED",
            Cpp::MOZMAYCALLAFTERMUSTRETURN => "MOZ_MAY_CALL_AFTER_MUST_RETURN",
            Cpp::MOZMUSTOVERRIDE => "MOZ_MUST_OVERRIDE",
            Cpp::MOZMUSTRETURNFROMCALLERIFTHISISARG => "MOZ_MUST_RETURN_FROM_CALLER_IF_THIS_IS_ARG",
            Cpp::MOZMUSTUSE => "MOZ_MUST_USE",
            Cpp::MOZMUSTUSETYPE => "MOZ_MUST_USE_TYPE",
            Cpp::MOZNEEDSMEMMOVABLEMEMBERS => "MOZ_NEEDS_MEMMOVABLE_MEMBERS",
            Cpp::MOZNEEDSMEMMOVABLETYPE => "MOZ_NEEDS_MEMMOVABLE_TYPE",
            Cpp::MOZNEEDSNOVTABLETYPE => "MOZ_NEEDS_NO_VTABLE_TYPE",
            Cpp::MOZNEVERINLINE => "MOZ_NEVER_INLINE",
            Cpp::MOZNEVERINLINEDEBUG => "MOZ_NEVER_INLINE_DEBUG",
            Cpp::MOZNONHEAPCLASS => "MOZ_NONHEAP_CLASS",
            Cpp::MOZNONNULL => "MOZ_NONNULL",
            Cpp::MOZNONNULLRETURN => "MOZ_NONNULL_RETURN",
            Cpp::MOZNONAUTOABLE => "MOZ_NON_AUTOABLE",
            Cpp::MOZNONMEMMOVABLE => "MOZ_NON_MEMMOVABLE",
            Cpp::MOZNONOWNINGREF => "MOZ_NON_OWNING_REF",
            Cpp::MOZNONPARAM => "MOZ_NON_PARAM",
            Cpp::MOZNONTEMPORARYCLASS => "MOZ_NON_TEMPORARY_CLASS",
            Cpp::MOZNORETURN => "MOZ_NORETURN",
            Cpp::MOZNORETURNPTR => "MOZ_NORETURN_PTR",
            Cpp::MOZNOADDREFRELEASEONRETURN => "MOZ_NO_ADDREF_RELEASE_ON_RETURN",
            Cpp::MOZNOARITHMETICEXPRINARGUMENT => "MOZ_NO_ARITHMETIC_EXPR_IN_ARGUMENT",
            Cpp::MOZNODANGLINGONTEMPORARIES => "MOZ_NO_DANGLING_ON_TEMPORARIES",
            Cpp::MOZNOSANITIZESIGNEDOVERFLOW => "MOZ_NO_SANITIZE_SIGNED_OVERFLOW",
            Cpp::MOZNOSANITIZEUNSIGNEDOVERFLOW => "MOZ_NO_SANITIZE_UNSIGNED_OVERFLOW",
            Cpp::MOZONLYUSEDTOAVOIDSTATICCONSTRUCTORS => {
                "MOZ_ONLY_USED_TO_AVOID_STATIC_CONSTRUCTORS"
            }
            Cpp::MOZOWNINGREF => "MOZ_OWNING_REF",
            Cpp::MOZPOPDISABLENONTRIVIALUNIONWARNINGS => {
                "MOZ_POP_DISABLE_NONTRIVIAL_UNION_WARNINGS"
            }
            Cpp::MOZPRETENDNORETURNFORSTATICANALYSIS => "MOZ_PRETEND_NORETURN_FOR_STATIC_ANALYSIS",
            Cpp::MOZPUSHDISABLENONTRIVIALUNIONWARNINGS => {
                "MOZ_PUSH_DISABLE_NONTRIVIAL_UNION_WARNINGS"
            }
            Cpp::MOZRAII => "MOZ_RAII",
            Cpp::MOZREQUIREDBASEMETHOD => "MOZ_REQUIRED_BASE_METHOD",
            Cpp::MOZSTACKCLASS => "MOZ_STACK_CLASS",
            Cpp::MOZSTATICCLASS => "MOZ_STATIC_CLASS",
            Cpp::MOZSTATICLOCALCLASS => "MOZ_STATIC_LOCAL_CLASS",
            Cpp::MOZTEMPORARYCLASS => "MOZ_TEMPORARY_CLASS",
            Cpp::MOZTRIVIALCTORDTOR => "MOZ_TRIVIAL_CTOR_DTOR",
            Cpp::MOZTSANBLACKLIST => "MOZ_TSAN_BLACKLIST",
            Cpp::MOZUNSAFEREF => "MOZ_UNSAFE_REF",
            Cpp::MOZXPCOMABI => "MOZ_XPCOM_ABI",
            Cpp::JSPUBLICAPI => "JS_PUBLIC_API",
            Cpp::RawStringLiteral => "raw_string_literal",
            Cpp::TranslationUnit => "translation_unit",
            Cpp::PreprocInclude => "preproc_include",
            Cpp::PreprocDef => "preproc_def",
            Cpp::PreprocFunctionDef => "preproc_function_def",
            Cpp::PreprocParams => "preproc_params",
            Cpp::PreprocCall => "preproc_call",
            Cpp::PreprocIf => "preproc_if",
            Cpp::PreprocIfdef => "preproc_ifdef",
            Cpp::PreprocElse => "preproc_else",
            Cpp::PreprocElif => "preproc_elif",
            Cpp::PreprocIf2 => "preproc_if",
            Cpp::PreprocIfdef2 => "preproc_ifdef",
            Cpp::PreprocElse2 => "preproc_else",
            Cpp::PreprocElif2 => "preproc_elif",
            Cpp::PreprocExpression => "_preproc_expression",
            Cpp::ParenthesizedExpression => "parenthesized_expression",
            Cpp::PreprocDefined => "preproc_defined",
            Cpp::UnaryExpression => "unary_expression",
            Cpp::CallExpression => "call_expression",
            Cpp::ArgumentList => "argument_list",
            Cpp::BinaryExpression => "binary_expression",
            Cpp::FunctionDefinition => "function_definition",
            Cpp::Declaration => "declaration",
            Cpp::TypeDefinition => "type_definition",
            Cpp::DeclarationModifiers => "_declaration_modifiers",
            Cpp::DeclarationSpecifiers => "_declaration_specifiers",
            Cpp::LinkageSpecification => "linkage_specification",
            Cpp::AttributeSpecifier => "attribute_specifier",
            Cpp::Attribute => "attribute",
            Cpp::AttributeDeclaration => "attribute_declaration",
            Cpp::MsDeclspecModifier => "ms_declspec_modifier",
            Cpp::MsBasedModifier => "ms_based_modifier",
            Cpp::MsCallModifier => "ms_call_modifier",
            Cpp::MsUnalignedPtrModifier => "ms_unaligned_ptr_modifier",
            Cpp::MsPointerModifier => "ms_pointer_modifier",
            Cpp::DeclarationList => "declaration_list",
            Cpp::Declarator => "_declarator",
            Cpp::FieldDeclarator => "_field_declarator",
            Cpp::TypeDeclarator => "_type_declarator",
            Cpp::AbstractDeclarator => "_abstract_declarator",
            Cpp::ParenthesizedDeclarator => "parenthesized_declarator",
            Cpp::ParenthesizedDeclarator2 => "parenthesized_declarator",
            Cpp::ParenthesizedDeclarator3 => "parenthesized_declarator",
            Cpp::AbstractParenthesizedDeclarator => "abstract_parenthesized_declarator",
            Cpp::AttributedDeclarator => "attributed_declarator",
            Cpp::AttributedDeclarator2 => "attributed_declarator",
            Cpp::AttributedDeclarator3 => "attributed_declarator",
            Cpp::PointerDeclarator => "pointer_declarator",
            Cpp::PointerDeclarator2 => "pointer_declarator",
            Cpp::PointerDeclarator3 => "pointer_declarator",
            Cpp::AbstractPointerDeclarator => "abstract_pointer_declarator",
            Cpp::FunctionDeclarator => "function_declarator",
            Cpp::FunctionDeclarator2 => "function_declarator",
            Cpp::FunctionDeclarator3 => "function_declarator",
            Cpp::AbstractFunctionDeclarator => "abstract_function_declarator",
            Cpp::ArrayDeclarator => "array_declarator",
            Cpp::ArrayDeclarator2 => "array_declarator",
            Cpp::ArrayDeclarator3 => "array_declarator",
            Cpp::AbstractArrayDeclarator => "abstract_array_declarator",
            Cpp::InitDeclarator => "init_declarator",
            Cpp::CompoundStatement => "compound_statement",
            Cpp::StorageClassSpecifier => "storage_class_specifier",
            Cpp::TypeQualifier => "type_qualifier",
            Cpp::TypeSpecifier => "_type_specifier",
            Cpp::SizedTypeSpecifier => "sized_type_specifier",
            Cpp::EnumSpecifier => "enum_specifier",
            Cpp::EnumeratorList => "enumerator_list",
            Cpp::StructSpecifier => "struct_specifier",
            Cpp::UnionSpecifier => "union_specifier",
            Cpp::FieldDeclarationList => "field_declaration_list",
            Cpp::FieldDeclarationListItem => "_field_declaration_list_item",
            Cpp::FieldDeclaration => "field_declaration",
            Cpp::BitfieldClause => "bitfield_clause",
            Cpp::Enumerator => "enumerator",
            Cpp::ParameterList => "parameter_list",
            Cpp::ParameterDeclaration => "parameter_declaration",
            Cpp::AttributedStatement => "attributed_statement",
            Cpp::AttributedStatement2 => "attributed_statement",
            Cpp::LabeledStatement => "labeled_statement",
            Cpp::ExpressionStatement => "expression_statement",
            Cpp::IfStatement => "if_statement",
            Cpp::SwitchStatement => "switch_statement",
            Cpp::CaseStatement => "case_statement",
            Cpp::WhileStatement => "while_statement",
            Cpp::DoStatement => "do_statement",
            Cpp::ForStatement => "for_statement",
            Cpp::ReturnStatement => "return_statement",
            Cpp::BreakStatement => "break_statement",
            Cpp::ContinueStatement => "continue_statement",
            Cpp::GotoStatement => "goto_statement",
            Cpp::Expression => "_expression",
            Cpp::CommaExpression => "comma_expression",
            Cpp::ConditionalExpression => "conditional_expression",
            Cpp::AssignmentExpression => "assignment_expression",
            Cpp::PointerExpression => "pointer_expression",
            Cpp::UnaryExpression2 => "unary_expression",
            Cpp::BinaryExpression2 => "binary_expression",
            Cpp::UpdateExpression => "update_expression",
            Cpp::CastExpression => "cast_expression",
            Cpp::TypeDescriptor => "type_descriptor",
            Cpp::SizeofExpression => "sizeof_expression",
            Cpp::SubscriptExpression => "subscript_expression",
            Cpp::CallExpression2 => "call_expression",
            Cpp::ArgumentList2 => "argument_list",
            Cpp::FieldExpression => "field_expression",
            Cpp::CompoundLiteralExpression => "compound_literal_expression",
            Cpp::ParenthesizedExpression2 => "parenthesized_expression",
            Cpp::InitializerList => "initializer_list",
            Cpp::InitializerPair => "initializer_pair",
            Cpp::SubscriptDesignator => "subscript_designator",
            Cpp::FieldDesignator => "field_designator",
            Cpp::CharLiteral => "char_literal",
            Cpp::ConcatenatedString => "concatenated_string",
            Cpp::StringLiteral => "string_literal",
            Cpp::EmptyDeclaration => "_empty_declaration",
            Cpp::Decltype => "decltype",
            Cpp::ClassSpecifier => "class_specifier",
            Cpp::ClassName => "_class_name",
            Cpp::VirtualSpecifier => "virtual_specifier",
            Cpp::VirtualFunctionSpecifier => "virtual_function_specifier",
            Cpp::ExplicitFunctionSpecifier => "explicit_function_specifier",
            Cpp::BaseClassClause => "base_class_clause",
            Cpp::EnumBaseClause => "_enum_base_clause",
            Cpp::DependentType => "dependent_type",
            Cpp::TemplateDeclaration => "template_declaration",
            Cpp::TemplateInstantiation => "template_instantiation",
            Cpp::TemplateParameterList => "template_parameter_list",
            Cpp::TypeParameterDeclaration => "type_parameter_declaration",
            Cpp::VariadicTypeParameterDeclaration => "variadic_type_parameter_declaration",
            Cpp::OptionalTypeParameterDeclaration => "optional_type_parameter_declaration",
            Cpp::TemplateTemplateParameterDeclaration => "template_template_parameter_declaration",
            Cpp::OptionalParameterDeclaration => "optional_parameter_declaration",
            Cpp::VariadicParameterDeclaration => "variadic_parameter_declaration",
            Cpp::VariadicDeclarator => "variadic_declarator",
            Cpp::ReferenceDeclarator => "reference_declarator",
            Cpp::OperatorCast => "operator_cast",
            Cpp::FieldInitializerList => "field_initializer_list",
            Cpp::FieldInitializer => "field_initializer",
            Cpp::FunctionDefinition2 => "function_definition",
            Cpp::ConstructorSpecifiers => "_constructor_specifiers",
            Cpp::FunctionDefinition3 => "function_definition",
            Cpp::Declaration2 => "declaration",
            Cpp::FunctionDefinition4 => "function_definition",
            Cpp::Declaration3 => "declaration",
            Cpp::DefaultMethodClause => "default_method_clause",
            Cpp::DeleteMethodClause => "delete_method_clause",
            Cpp::FriendDeclaration => "friend_declaration",
            Cpp::AccessSpecifier => "access_specifier",
            Cpp::ReferenceDeclarator2 => "reference_declarator",
            Cpp::ReferenceDeclarator3 => "reference_declarator",
            Cpp::AbstractReferenceDeclarator => "abstract_reference_declarator",
            Cpp::StructuredBindingDeclarator => "structured_binding_declarator",
            Cpp::RefQualifier => "ref_qualifier",
            Cpp::TrailingReturnType => "trailing_return_type",
            Cpp::Noexcept => "noexcept",
            Cpp::ThrowSpecifier => "throw_specifier",
            Cpp::TemplateType => "template_type",
            Cpp::TemplateMethod => "template_method",
            Cpp::TemplateFunction => "template_function",
            Cpp::TemplateArgumentList => "template_argument_list",
            Cpp::NamespaceDefinition => "namespace_definition",
            Cpp::NamespaceDefinitionName => "namespace_definition_name",
            Cpp::UsingDeclaration => "using_declaration",
            Cpp::AliasDeclaration => "alias_declaration",
            Cpp::StaticAssertDeclaration => "static_assert_declaration",
            Cpp::ConditionClause => "condition_clause",
            Cpp::Declaration4 => "declaration",
            Cpp::ForRangeLoop => "for_range_loop",
            Cpp::CoReturnStatement => "co_return_statement",
            Cpp::CoYieldStatement => "co_yield_statement",
            Cpp::ThrowStatement => "throw_statement",
            Cpp::TryStatement => "try_statement",
            Cpp::CatchClause => "catch_clause",
            Cpp::CoAwaitExpression => "co_await_expression",
            Cpp::NewExpression => "new_expression",
            Cpp::NewDeclarator => "new_declarator",
            Cpp::DeleteExpression => "delete_expression",
            Cpp::LambdaExpression => "lambda_expression",
            Cpp::LambdaCaptureSpecifier => "lambda_capture_specifier",
            Cpp::LambdaDefaultCapture => "lambda_default_capture",
            Cpp::ParameterPackExpansion => "parameter_pack_expansion",
            Cpp::ParameterPackExpansion2 => "parameter_pack_expansion",
            Cpp::DestructorName => "destructor_name",
            Cpp::DependentName => "dependent_name",
            Cpp::DependentName2 => "dependent_name",
            Cpp::DependentName3 => "dependent_name",
            Cpp::ScopeResolution => "_scope_resolution",
            Cpp::QualifiedIdentifier => "qualified_identifier",
            Cpp::QualifiedIdentifier2 => "qualified_identifier",
            Cpp::QualifiedIdentifier3 => "qualified_identifier",
            Cpp::QualifiedIdentifier4 => "qualified_identifier",
            Cpp::UserDefinedLiteral => "user_defined_literal",
            Cpp::AloneMacroCall => "alone_macro_call",
            Cpp::CallMacroWithDeclFirstArg => "_call_macro_with_decl_first_arg",
            Cpp::MacroStatement => "macro_statement",
            Cpp::MacroAnnotation => "macro_annotation",
            Cpp::TranslationUnitRepeat1 => "translation_unit_repeat1",
            Cpp::PreprocParamsRepeat1 => "preproc_params_repeat1",
            Cpp::PreprocIfInFieldDeclarationListRepeat1 => {
                "preproc_if_in_field_declaration_list_repeat1"
            }
            Cpp::PreprocArgumentListRepeat1 => "preproc_argument_list_repeat1",
            Cpp::DeclarationRepeat1 => "declaration_repeat1",
            Cpp::TypeDefinitionRepeat1 => "type_definition_repeat1",
            Cpp::TypeDefinitionRepeat2 => "type_definition_repeat2",
            Cpp::DeclarationSpecifiersRepeat1 => "_declaration_specifiers_repeat1",
            Cpp::AttributeDeclarationRepeat1 => "attribute_declaration_repeat1",
            Cpp::AttributedDeclaratorRepeat1 => "attributed_declarator_repeat1",
            Cpp::PointerDeclaratorRepeat1 => "pointer_declarator_repeat1",
            Cpp::FunctionDeclaratorRepeat1 => "function_declarator_repeat1",
            Cpp::FunctionDeclaratorRepeat2 => "function_declarator_repeat2",
            Cpp::AbstractFunctionDeclaratorRepeat1 => "abstract_function_declarator_repeat1",
            Cpp::SizedTypeSpecifierRepeat1 => "sized_type_specifier_repeat1",
            Cpp::EnumeratorListRepeat1 => "enumerator_list_repeat1",
            Cpp::FieldDeclarationRepeat1 => "field_declaration_repeat1",
            Cpp::ParameterListRepeat1 => "parameter_list_repeat1",
            Cpp::CaseStatementRepeat1 => "case_statement_repeat1",
            Cpp::ArgumentListRepeat1 => "argument_list_repeat1",
            Cpp::InitializerListRepeat1 => "initializer_list_repeat1",
            Cpp::InitializerPairRepeat1 => "initializer_pair_repeat1",
            Cpp::ConcatenatedStringRepeat1 => "concatenated_string_repeat1",
            Cpp::StringLiteralRepeat1 => "string_literal_repeat1",
            Cpp::ClassSpecifierRepeat1 => "class_specifier_repeat1",
            Cpp::BaseClassClauseRepeat1 => "base_class_clause_repeat1",
            Cpp::TemplateParameterListRepeat1 => "template_parameter_list_repeat1",
            Cpp::FieldInitializerListRepeat1 => "field_initializer_list_repeat1",
            Cpp::OperatorCastDefinitionRepeat1 => "operator_cast_definition_repeat1",
            Cpp::StructuredBindingDeclaratorRepeat1 => "structured_binding_declarator_repeat1",
            Cpp::ThrowSpecifierRepeat1 => "throw_specifier_repeat1",
            Cpp::TemplateArgumentListRepeat1 => "template_argument_list_repeat1",
            Cpp::TryStatementRepeat1 => "try_statement_repeat1",
            Cpp::LambdaCaptureSpecifierRepeat1 => "lambda_capture_specifier_repeat1",
            Cpp::AloneMacroCallRepeat1 => "alone_macro_call_repeat1",
            Cpp::FieldIdentifier => "field_identifier",
            Cpp::NamespaceIdentifier => "namespace_identifier",
            Cpp::StatementIdentifier => "statement_identifier",
            Cpp::TypeIdentifier => "type_identifier",
            Cpp::Error => "ERROR",
        }
    }
}

impl From<u16> for Cpp {
    #[inline(always)]
    fn from(x: u16) -> Self {
        num::FromPrimitive::from_u16(x).unwrap_or(Self::Error)
    }
}

// Cpp == u16
impl PartialEq<u16> for Cpp {
    #[inline(always)]
    fn eq(&self, x: &u16) -> bool {
        *self == Cpp::from(*x)
    }
}

// u16 == Cpp
impl PartialEq<Cpp> for u16 {
    #[inline(always)]
    fn eq(&self, x: &Cpp) -> bool {
        *x == *self
    }
}
