// Code generated; DO NOT EDIT.

#[derive(Clone, Debug, PartialEq, FromPrimitive)]
pub enum Python {
    End = 0,
    Identifier = 1,
    Import = 2,
    DOT = 3,
    From = 4,
    Future = 5,
    LPAREN = 6,
    RPAREN = 7,
    COMMA = 8,
    As = 9,
    STAR = 10,
    Print = 11,
    GTGT = 12,
    Assert = 13,
    COLONEQ = 14,
    Return = 15,
    Del = 16,
    Raise = 17,
    Pass = 18,
    Break = 19,
    Continue = 20,
    If = 21,
    COLON = 22,
    Elif = 23,
    Else = 24,
    Async = 25,
    For = 26,
    In = 27,
    While = 28,
    Try = 29,
    Except = 30,
    Finally = 31,
    With = 32,
    Def = 33,
    DASHGT = 34,
    STARSTAR = 35,
    Global = 36,
    Nonlocal = 37,
    Exec = 38,
    Class = 39,
    AT = 40,
    LBRACK = 41,
    RBRACK = 42,
    EQ = 43,
    Not = 44,
    And = 45,
    Or = 46,
    PLUS = 47,
    DASH = 48,
    SLASH = 49,
    PERCENT = 50,
    SLASHSLASH = 51,
    PIPE = 52,
    AMP = 53,
    CARET = 54,
    LTLT = 55,
    TILDE = 56,
    LT = 57,
    LTEQ = 58,
    EQEQ = 59,
    BANGEQ = 60,
    GTEQ = 61,
    GT = 62,
    LTGT = 63,
    Is = 64,
    Lambda3 = 65,
    PLUSEQ = 66,
    DASHEQ = 67,
    STAREQ = 68,
    SLASHEQ = 69,
    ATEQ = 70,
    SLASHSLASHEQ = 71,
    PERCENTEQ = 72,
    STARSTAREQ = 73,
    GTGTEQ = 74,
    LTLTEQ = 75,
    AMPEQ = 76,
    CARETEQ = 77,
    PIPEEQ = 78,
    Yield2 = 79,
    Ellipsis = 80,
    LBRACE = 81,
    RBRACE = 82,
    EscapeSequence = 83,
    NotEscapeSequence = 84,
    FormatSpecifierToken1 = 85,
    TypeConversion = 86,
    Integer = 87,
    Float = 88,
    Await2 = 89,
    True = 90,
    False = 91,
    None = 92,
    Comment = 93,
    Semicolon = 94,
    Newline = 95,
    Indent = 96,
    Dedent = 97,
    DQUOTE = 98,
    StringContent = 99,
    DQUOTE2 = 100,
    Module = 101,
    Statement = 102,
    SimpleStatements = 103,
    ImportStatement = 104,
    ImportPrefix = 105,
    RelativeImport = 106,
    FutureImportStatement = 107,
    ImportFromStatement = 108,
    ImportList = 109,
    AliasedImport = 110,
    WildcardImport = 111,
    PrintStatement = 112,
    Chevron = 113,
    AssertStatement = 114,
    ExpressionStatement = 115,
    NamedExpression = 116,
    ReturnStatement = 117,
    DeleteStatement = 118,
    RaiseStatement = 119,
    PassStatement = 120,
    BreakStatement = 121,
    ContinueStatement = 122,
    IfStatement = 123,
    ElifClause = 124,
    ElseClause = 125,
    ForStatement = 126,
    WhileStatement = 127,
    TryStatement = 128,
    ExceptClause = 129,
    FinallyClause = 130,
    WithStatement = 131,
    WithClause = 132,
    WithItem = 133,
    FunctionDefinition = 134,
    Parameters = 135,
    LambdaParameters = 136,
    ListSplat = 137,
    DictionarySplat = 138,
    GlobalStatement = 139,
    NonlocalStatement = 140,
    ExecStatement = 141,
    ClassDefinition = 142,
    ParenthesizedListSplat = 143,
    ArgumentList = 144,
    DecoratedDefinition = 145,
    Decorator = 146,
    Block = 147,
    ExpressionList = 148,
    DottedName = 149,
    Parameters2 = 150,
    Patterns = 151,
    Parameter = 152,
    Pattern = 153,
    TuplePattern = 154,
    ListPattern = 155,
    DefaultParameter = 156,
    TypedDefaultParameter = 157,
    ListSplatPattern = 158,
    DictionarySplatPattern = 159,
    ExpressionWithinForInClause = 160,
    Expression = 161,
    PrimaryExpression = 162,
    NotOperator = 163,
    BooleanOperator = 164,
    BinaryOperator = 165,
    UnaryOperator = 166,
    ComparisonOperator = 167,
    Lambda = 168,
    Lambda2 = 169,
    Assignment = 170,
    AugmentedAssignment = 171,
    PatternList = 172,
    RightHandSide = 173,
    Yield = 174,
    Attribute = 175,
    Subscript = 176,
    Slice = 177,
    Call = 178,
    TypedParameter = 179,
    Type = 180,
    KeywordArgument = 181,
    List = 182,
    Set = 183,
    Tuple = 184,
    Dictionary = 185,
    Pair = 186,
    ListComprehension = 187,
    DictionaryComprehension = 188,
    SetComprehension = 189,
    GeneratorExpression = 190,
    ComprehensionClauses = 191,
    ParenthesizedExpression = 192,
    CollectionElements = 193,
    ForInClause = 194,
    IfClause = 195,
    ConditionalExpression = 196,
    ConcatenatedString = 197,
    String = 198,
    Interpolation = 199,
    FormatSpecifier = 200,
    FormatExpression = 201,
    Await = 202,
    ModuleRepeat1 = 203,
    SimpleStatementsRepeat1 = 204,
    ImportPrefixRepeat1 = 205,
    ImportListRepeat1 = 206,
    PrintStatementRepeat1 = 207,
    AssertStatementRepeat1 = 208,
    IfStatementRepeat1 = 209,
    TryStatementRepeat1 = 210,
    WithClauseRepeat1 = 211,
    GlobalStatementRepeat1 = 212,
    ArgumentListRepeat1 = 213,
    DecoratedDefinitionRepeat1 = 214,
    DottedNameRepeat1 = 215,
    ParametersRepeat1 = 216,
    PatternsRepeat1 = 217,
    ComparisonOperatorRepeat1 = 218,
    SubscriptRepeat1 = 219,
    DictionaryRepeat1 = 220,
    ComprehensionClausesRepeat1 = 221,
    CollectionElementsRepeat1 = 222,
    ForInClauseRepeat1 = 223,
    ConcatenatedStringRepeat1 = 224,
    StringRepeat1 = 225,
    FormatSpecifierRepeat1 = 226,
    Error = 227,
}

impl std::fmt::Display for Python {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{:?}", self)
    }
}

#[allow(clippy::unreadable_literal)]
static KEYS: phf::Map<&'static str, &'static str> = ::phf::Map {
    key: 3213172566270843353,
    disps: ::phf::Slice::Static(&[
        (0, 0),
        (0, 3),
        (0, 0),
        (0, 84),
        (0, 11),
        (0, 45),
        (0, 42),
        (0, 0),
        (0, 50),
        (0, 5),
        (0, 55),
        (3, 101),
        (0, 46),
        (0, 63),
        (0, 13),
        (12, 221),
        (0, 2),
        (0, 52),
        (11, 107),
        (0, 186),
        (0, 0),
        (0, 42),
        (4, 174),
        (0, 6),
        (0, 103),
        (2, 149),
        (1, 111),
        (0, 184),
        (26, 210),
        (1, 42),
        (0, 14),
        (0, 67),
        (0, 21),
        (0, 141),
        (1, 11),
        (36, 22),
        (0, 220),
        (0, 12),
        (0, 46),
        (8, 39),
        (0, 13),
        (0, 61),
        (0, 120),
        (1, 88),
        (1, 0),
        (79, 96),
    ]),
    entries: ::phf::Slice::Static(&[
        ("Subscript", "subscript"),
        ("Set", "set"),
        ("CARET", "^"),
        ("TILDE", "~"),
        ("PLUSEQ", "+="),
        ("AssertStatementRepeat1", "assert_statement_repeat1"),
        ("CollectionElements", "_collection_elements"),
        ("BreakStatement", "break_statement"),
        ("AMPEQ", "&="),
        ("DeleteStatement", "delete_statement"),
        ("ListSplatPattern", "list_splat_pattern"),
        ("StringContent", "_string_content"),
        ("RPAREN", ")"),
        ("Break", "break"),
        ("ParenthesizedExpression", "parenthesized_expression"),
        ("ImportFromStatement", "import_from_statement"),
        ("SimpleStatements", "_simple_statements"),
        ("DASHGT", "->"),
        ("FutureImportStatement", "future_import_statement"),
        ("In", "in"),
        ("WildcardImport", "wildcard_import"),
        ("ImportListRepeat1", "_import_list_repeat1"),
        ("Expression", "expression"),
        ("GeneratorExpression", "generator_expression"),
        ("Or", "or"),
        ("FunctionDefinition", "function_definition"),
        ("AugmentedAssignment", "augmented_assignment"),
        ("ParenthesizedListSplat", "parenthesized_list_splat"),
        ("Chevron", "chevron"),
        ("DictionarySplatPattern", "dictionary_splat_pattern"),
        ("TuplePattern", "tuple_pattern"),
        ("ExpressionList", "expression_list"),
        ("AssertStatement", "assert_statement"),
        ("End", "end"),
        ("GlobalStatement", "global_statement"),
        ("Indent", "_indent"),
        ("Is", "is"),
        ("CARETEQ", "^="),
        ("ExceptClause", "except_clause"),
        ("Lambda", "lambda"),
        ("Return", "return"),
        (
            "ComprehensionClausesRepeat1",
            "_comprehension_clauses_repeat1",
        ),
        ("RBRACE", "}"),
        ("GTEQ", ">="),
        ("NotOperator", "not_operator"),
        ("As", "as"),
        ("Dedent", "_dedent"),
        ("NamedExpression", "named_expression"),
        ("PatternList", "pattern_list"),
        ("Raise", "raise"),
        ("ModuleRepeat1", "module_repeat1"),
        ("PatternsRepeat1", "_patterns_repeat1"),
        ("ListSplat", "list_splat"),
        ("TypeConversion", "type_conversion"),
        ("COMMA", ","),
        ("TryStatementRepeat1", "try_statement_repeat1"),
        ("WhileStatement", "while_statement"),
        ("ListPattern", "list_pattern"),
        ("Comment", "comment"),
        ("Integer", "integer"),
        ("From", "from"),
        ("WithItem", "with_item"),
        ("Nonlocal", "nonlocal"),
        ("ElifClause", "elif_clause"),
        ("ForInClause", "for_in_clause"),
        ("Def", "def"),
        ("PERCENTEQ", "%="),
        ("CollectionElementsRepeat1", "_collection_elements_repeat1"),
        ("IfStatement", "if_statement"),
        ("FinallyClause", "finally_clause"),
        ("Semicolon", "_semicolon"),
        (
            "ExpressionWithinForInClause",
            "_expression_within_for_in_clause",
        ),
        ("ListComprehension", "list_comprehension"),
        ("Statement", "_statement"),
        ("GlobalStatementRepeat1", "global_statement_repeat1"),
        ("IfStatementRepeat1", "if_statement_repeat1"),
        ("Newline", "_newline"),
        ("SubscriptRepeat1", "subscript_repeat1"),
        ("Elif", "elif"),
        ("STAR", "*"),
        ("Lambda3", "lambda"),
        ("DefaultParameter", "default_parameter"),
        ("UnaryOperator", "unary_operator"),
        ("Dictionary", "dictionary"),
        ("NotEscapeSequence", "_not_escape_sequence"),
        ("Try", "try"),
        ("GTGT", ">>"),
        ("Async", "async"),
        ("FormatSpecifierToken1", "format_specifier_token1"),
        ("Del", "del"),
        ("Await2", "await"),
        ("BANGEQ", "!="),
        ("LambdaParameters", "lambda_parameters"),
        ("ImportList", "_import_list"),
        ("RaiseStatement", "raise_statement"),
        ("PrimaryExpression", "primary_expression"),
        ("ForStatement", "for_statement"),
        ("PassStatement", "pass_statement"),
        ("DottedName", "dotted_name"),
        ("List", "list"),
        ("Assert", "assert"),
        ("SLASHSLASH", "//"),
        ("ImportPrefixRepeat1", "import_prefix_repeat1"),
        ("Decorator", "decorator"),
        ("LTGT", "<>"),
        ("SLASHSLASHEQ", "//="),
        ("Interpolation", "interpolation"),
        ("Print", "print"),
        ("Await", "await"),
        ("DOT", "."),
        ("Ellipsis", "ellipsis"),
        ("ParametersRepeat1", "_parameters_repeat1"),
        ("RBRACK", "]"),
        ("AMP", "&"),
        ("Attribute", "attribute"),
        ("RightHandSide", "_right_hand_side"),
        ("FormatSpecifierRepeat1", "format_specifier_repeat1"),
        ("COLON", ":"),
        ("WithStatement", "with_statement"),
        ("Lambda2", "lambda"),
        ("Type", "type"),
        ("ForInClauseRepeat1", "for_in_clause_repeat1"),
        ("Except", "except"),
        ("DASHEQ", "-="),
        ("ATEQ", "@="),
        ("PrintStatementRepeat1", "print_statement_repeat1"),
        ("None", "none"),
        ("TypedParameter", "typed_parameter"),
        ("ArgumentListRepeat1", "argument_list_repeat1"),
        ("EQEQ", "=="),
        ("Block", "block"),
        ("Pass", "pass"),
        ("Yield2", "yield"),
        ("Pattern", "pattern"),
        ("TypedDefaultParameter", "typed_default_parameter"),
        ("ContinueStatement", "continue_statement"),
        ("FormatExpression", "format_expression"),
        ("EscapeSequence", "escape_sequence"),
        ("Finally", "finally"),
        ("Parameters2", "_parameters"),
        ("DecoratedDefinitionRepeat1", "decorated_definition_repeat1"),
        ("ConcatenatedStringRepeat1", "concatenated_string_repeat1"),
        ("ComparisonOperatorRepeat1", "comparison_operator_repeat1"),
        ("Error", "ERROR"),
        ("ConditionalExpression", "conditional_expression"),
        ("Else", "else"),
        ("ClassDefinition", "class_definition"),
        ("Parameter", "parameter"),
        ("AT", "@"),
        ("DictionarySplat", "dictionary_splat"),
        ("Slice", "slice"),
        ("SimpleStatementsRepeat1", "_simple_statements_repeat1"),
        ("DQUOTE2", "\""),
        ("GT", ">"),
        ("PLUS", "+"),
        ("DQUOTE", "\""),
        ("SLASH", "/"),
        ("STARSTAREQ", "**="),
        ("StringRepeat1", "string_repeat1"),
        ("STARSTAR", "**"),
        ("TryStatement", "try_statement"),
        ("PERCENT", "%"),
        ("ComparisonOperator", "comparison_operator"),
        ("COLONEQ", ":="),
        ("Call", "call"),
        ("For", "for"),
        ("FormatSpecifier", "format_specifier"),
        ("DottedNameRepeat1", "dotted_name_repeat1"),
        ("LTLTEQ", "<<="),
        ("Future", "__future__"),
        ("ElseClause", "else_clause"),
        ("BinaryOperator", "binary_operator"),
        ("AliasedImport", "aliased_import"),
        ("NonlocalStatement", "nonlocal_statement"),
        ("Not", "not"),
        ("LBRACE", "{"),
        ("While", "while"),
        ("DASH", "-"),
        ("Import", "import"),
        ("RelativeImport", "relative_import"),
        ("ExpressionStatement", "expression_statement"),
        ("BooleanOperator", "boolean_operator"),
        ("Continue", "continue"),
        ("WithClauseRepeat1", "with_clause_repeat1"),
        ("ArgumentList", "argument_list"),
        ("Tuple", "tuple"),
        ("False", "false"),
        ("Global", "global"),
        ("True", "true"),
        ("EQ", "="),
        ("LPAREN", "("),
        ("Module", "module"),
        ("ImportStatement", "import_statement"),
        ("KeywordArgument", "keyword_argument"),
        ("Yield", "yield"),
        ("Float", "float"),
        ("String", "string"),
        ("LBRACK", "["),
        ("PrintStatement", "print_statement"),
        ("SLASHEQ", "/="),
        ("ReturnStatement", "return_statement"),
        ("PIPE", "|"),
        ("Assignment", "assignment"),
        ("Class", "class"),
        ("Identifier", "identifier"),
        ("STAREQ", "*="),
        ("ConcatenatedString", "concatenated_string"),
        ("LTLT", "<<"),
        ("Parameters", "parameters"),
        ("DictionaryRepeat1", "dictionary_repeat1"),
        ("DictionaryComprehension", "dictionary_comprehension"),
        ("LTEQ", "<="),
        ("PIPEEQ", "|="),
        ("Exec", "exec"),
        ("If", "if"),
        ("GTGTEQ", ">>="),
        ("And", "and"),
        ("ComprehensionClauses", "_comprehension_clauses"),
        ("Pair", "pair"),
        ("IfClause", "if_clause"),
        ("Patterns", "_patterns"),
        ("WithClause", "with_clause"),
        ("LT", "<"),
        ("SetComprehension", "set_comprehension"),
        ("With", "with"),
        ("DecoratedDefinition", "decorated_definition"),
        ("ImportPrefix", "import_prefix"),
        ("ExecStatement", "exec_statement"),
    ]),
};

impl From<Python> for &str {
    #[inline(always)]
    fn from(grammar: Python) -> &'static str {
        KEYS.get(grammar.to_string().as_str()).unwrap()
    }
}

impl From<u16> for Python {
    #[inline(always)]
    fn from(x: u16) -> Self {
        num::FromPrimitive::from_u16(x).unwrap_or(Self::Error)
    }
}

// Python == u16
impl PartialEq<u16> for Python {
    #[inline(always)]
    fn eq(&self, x: &u16) -> bool {
        *self == Python::from(*x)
    }
}

// u16 == Python
impl PartialEq<Python> for u16 {
    #[inline(always)]
    fn eq(&self, x: &Python) -> bool {
        *x == *self
    }
}
