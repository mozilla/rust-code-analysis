// Code generated; DO NOT EDIT.

#[derive(Clone, Debug, PartialEq, FromPrimitive)]
pub enum Python {
    End = 0,
    Identifier = 1,
    Import = 2,
    DOT = 3,
    From = 4,
    Future = 5,
    LPAREN = 6,
    RPAREN = 7,
    COMMA = 8,
    As = 9,
    STAR = 10,
    Print = 11,
    GTGT = 12,
    Assert = 13,
    COLONEQ = 14,
    Return = 15,
    Del = 16,
    Raise = 17,
    Pass = 18,
    Break = 19,
    Continue = 20,
    If = 21,
    COLON = 22,
    Elif = 23,
    Else = 24,
    Async = 25,
    For = 26,
    In = 27,
    While = 28,
    Try = 29,
    Except = 30,
    Finally = 31,
    With = 32,
    Def = 33,
    DASHGT = 34,
    STARSTAR = 35,
    Global = 36,
    Nonlocal = 37,
    Exec = 38,
    Class = 39,
    AT = 40,
    LBRACK = 41,
    RBRACK = 42,
    EQ = 43,
    Not = 44,
    And = 45,
    Or = 46,
    PLUS = 47,
    DASH = 48,
    SLASH = 49,
    PERCENT = 50,
    SLASHSLASH = 51,
    PIPE = 52,
    AMP = 53,
    CARET = 54,
    LTLT = 55,
    TILDE = 56,
    LT = 57,
    LTEQ = 58,
    EQEQ = 59,
    BANGEQ = 60,
    GTEQ = 61,
    GT = 62,
    LTGT = 63,
    Is = 64,
    Lambda3 = 65,
    PLUSEQ = 66,
    DASHEQ = 67,
    STAREQ = 68,
    SLASHEQ = 69,
    ATEQ = 70,
    SLASHSLASHEQ = 71,
    PERCENTEQ = 72,
    STARSTAREQ = 73,
    GTGTEQ = 74,
    LTLTEQ = 75,
    AMPEQ = 76,
    CARETEQ = 77,
    PIPEEQ = 78,
    Yield2 = 79,
    Ellipsis = 80,
    LBRACE = 81,
    RBRACE = 82,
    EscapeSequence = 83,
    NotEscapeSequence = 84,
    FormatSpecifierToken1 = 85,
    TypeConversion = 86,
    Integer = 87,
    Float = 88,
    Await2 = 89,
    True = 90,
    False = 91,
    None = 92,
    Comment = 93,
    Semicolon = 94,
    Newline = 95,
    Indent = 96,
    Dedent = 97,
    DQUOTE = 98,
    StringContent = 99,
    DQUOTE2 = 100,
    Module = 101,
    Statement = 102,
    SimpleStatements = 103,
    ImportStatement = 104,
    ImportPrefix = 105,
    RelativeImport = 106,
    FutureImportStatement = 107,
    ImportFromStatement = 108,
    ImportList = 109,
    AliasedImport = 110,
    WildcardImport = 111,
    PrintStatement = 112,
    Chevron = 113,
    AssertStatement = 114,
    ExpressionStatement = 115,
    NamedExpression = 116,
    ReturnStatement = 117,
    DeleteStatement = 118,
    RaiseStatement = 119,
    PassStatement = 120,
    BreakStatement = 121,
    ContinueStatement = 122,
    IfStatement = 123,
    ElifClause = 124,
    ElseClause = 125,
    ForStatement = 126,
    WhileStatement = 127,
    TryStatement = 128,
    ExceptClause = 129,
    FinallyClause = 130,
    WithStatement = 131,
    WithClause = 132,
    WithItem = 133,
    FunctionDefinition = 134,
    Parameters = 135,
    LambdaParameters = 136,
    ListSplat = 137,
    DictionarySplat = 138,
    GlobalStatement = 139,
    NonlocalStatement = 140,
    ExecStatement = 141,
    ClassDefinition = 142,
    ParenthesizedListSplat = 143,
    ArgumentList = 144,
    DecoratedDefinition = 145,
    Decorator = 146,
    Block = 147,
    ExpressionList = 148,
    DottedName = 149,
    Parameters2 = 150,
    Patterns = 151,
    Parameter = 152,
    Pattern = 153,
    TuplePattern = 154,
    ListPattern = 155,
    DefaultParameter = 156,
    TypedDefaultParameter = 157,
    ListSplatPattern = 158,
    DictionarySplatPattern = 159,
    ExpressionWithinForInClause = 160,
    Expression = 161,
    PrimaryExpression = 162,
    NotOperator = 163,
    BooleanOperator = 164,
    BinaryOperator = 165,
    UnaryOperator = 166,
    ComparisonOperator = 167,
    Lambda = 168,
    Lambda2 = 169,
    Assignment = 170,
    AugmentedAssignment = 171,
    PatternList = 172,
    RightHandSide = 173,
    Yield = 174,
    Attribute = 175,
    Subscript = 176,
    Slice = 177,
    Call = 178,
    TypedParameter = 179,
    Type = 180,
    KeywordArgument = 181,
    List = 182,
    Set = 183,
    Tuple = 184,
    Dictionary = 185,
    Pair = 186,
    ListComprehension = 187,
    DictionaryComprehension = 188,
    SetComprehension = 189,
    GeneratorExpression = 190,
    ComprehensionClauses = 191,
    ParenthesizedExpression = 192,
    CollectionElements = 193,
    ForInClause = 194,
    IfClause = 195,
    ConditionalExpression = 196,
    ConcatenatedString = 197,
    String = 198,
    Interpolation = 199,
    FormatSpecifier = 200,
    FormatExpression = 201,
    Await = 202,
    ModuleRepeat1 = 203,
    SimpleStatementsRepeat1 = 204,
    ImportPrefixRepeat1 = 205,
    ImportListRepeat1 = 206,
    PrintStatementRepeat1 = 207,
    AssertStatementRepeat1 = 208,
    IfStatementRepeat1 = 209,
    TryStatementRepeat1 = 210,
    WithClauseRepeat1 = 211,
    GlobalStatementRepeat1 = 212,
    ArgumentListRepeat1 = 213,
    DecoratedDefinitionRepeat1 = 214,
    DottedNameRepeat1 = 215,
    ParametersRepeat1 = 216,
    PatternsRepeat1 = 217,
    ComparisonOperatorRepeat1 = 218,
    SubscriptRepeat1 = 219,
    DictionaryRepeat1 = 220,
    ComprehensionClausesRepeat1 = 221,
    CollectionElementsRepeat1 = 222,
    ForInClauseRepeat1 = 223,
    ConcatenatedStringRepeat1 = 224,
    StringRepeat1 = 225,
    FormatSpecifierRepeat1 = 226,
    Error = 227,
}

#[allow(clippy::unreadable_literal)]
static KEYS: phf::Map<&'static str, Python> = ::phf::Map {
    key: 12913932095322966823,
    disps: &[
        (0, 17),
        (0, 4),
        (0, 0),
        (0, 7),
        (1, 1),
        (6, 212),
        (1, 2),
        (0, 45),
        (1, 207),
        (1, 1),
        (0, 156),
        (0, 14),
        (0, 25),
        (0, 69),
        (2, 166),
        (3, 18),
        (0, 42),
        (0, 125),
        (0, 121),
        (0, 16),
        (0, 18),
        (0, 91),
        (2, 0),
        (3, 12),
        (7, 24),
        (0, 0),
        (21, 220),
        (14, 57),
        (2, 17),
        (8, 119),
        (6, 111),
        (0, 11),
        (0, 7),
        (1, 2),
        (0, 99),
        (0, 72),
        (0, 127),
        (43, 20),
        (0, 1),
        (6, 146),
        (0, 0),
        (125, 90),
        (32, 25),
        (0, 200),
        (0, 6),
    ],
    entries: &[
        ("set", Python::Set),
        ("_collection_elements", Python::CollectionElements),
        ("ellipsis", Python::Ellipsis),
        ("decorated_definition", Python::DecoratedDefinition),
        ("string_repeat1", Python::StringRepeat1),
        ("is", Python::Is),
        ("false", Python::False),
        ("<>", Python::LTGT),
        ("format_specifier", Python::FormatSpecifier),
        ("list_pattern", Python::ListPattern),
        ("dotted_name_repeat1", Python::DottedNameRepeat1),
        ("except", Python::Except),
        ("elif_clause", Python::ElifClause),
        ("_import_list_repeat1", Python::ImportListRepeat1),
        ("dictionary_comprehension", Python::DictionaryComprehension),
        ("=", Python::EQ),
        ("_semicolon", Python::Semicolon),
        ("list_comprehension", Python::ListComprehension),
        ("_import_list", Python::ImportList),
        ("if_statement_repeat1", Python::IfStatementRepeat1),
        ("else", Python::Else),
        (
            "concatenated_string_repeat1",
            Python::ConcatenatedStringRepeat1,
        ),
        ("&=", Python::AMPEQ),
        (
            "_expression_within_for_in_clause",
            Python::ExpressionWithinForInClause,
        ),
        ("assert", Python::Assert),
        ("del", Python::Del),
        ("await", Python::Await),
        ("class_definition", Python::ClassDefinition),
        ("try", Python::Try),
        ("concatenated_string", Python::ConcatenatedString),
        ("list_splat_pattern", Python::ListSplatPattern),
        ("try_statement", Python::TryStatement),
        ("finally", Python::Finally),
        ("pass", Python::Pass),
        ("dictionary_splat_pattern", Python::DictionarySplatPattern),
        ("print_statement_repeat1", Python::PrintStatementRepeat1),
        ("for_in_clause", Python::ForInClause),
        ("_simple_statements", Python::SimpleStatements),
        ("or", Python::Or),
        ("true", Python::True),
        ("if", Python::If),
        (">", Python::GT),
        ("lambda", Python::Lambda),
        ("class", Python::Class),
        (".", Python::DOT),
        (">=", Python::GTEQ),
        ("delete_statement", Python::DeleteStatement),
        ("global_statement", Python::GlobalStatement),
        ("<<", Python::LTLT),
        ("augmented_assignment", Python::AugmentedAssignment),
        ("assert_statement_repeat1", Python::AssertStatementRepeat1),
        ("format_expression", Python::FormatExpression),
        ("named_expression", Python::NamedExpression),
        ("-", Python::DASH),
        ("function_definition", Python::FunctionDefinition),
        ("tuple", Python::Tuple),
        ("yield", Python::Yield),
        ("generator_expression", Python::GeneratorExpression),
        ("dictionary_splat", Python::DictionarySplat),
        ("type_conversion", Python::TypeConversion),
        ("comment", Python::Comment),
        ("expression_list", Python::ExpressionList),
        ("none", Python::None),
        ("<", Python::LT),
        ("async", Python::Async),
        ("pair", Python::Pair),
        ("attribute", Python::Attribute),
        ("boolean_operator", Python::BooleanOperator),
        ("import_from_statement", Python::ImportFromStatement),
        ("pattern_list", Python::PatternList),
        ("with", Python::With),
        ("|=", Python::PIPEEQ),
        ("subscript_repeat1", Python::SubscriptRepeat1),
        ("typed_default_parameter", Python::TypedDefaultParameter),
        ("/", Python::SLASH),
        ("for_in_clause_repeat1", Python::ForInClauseRepeat1),
        ("wildcard_import", Python::WildcardImport),
        ("_dedent", Python::Dedent),
        ("else_clause", Python::ElseClause),
        ("parameter", Python::Parameter),
        ("import_prefix_repeat1", Python::ImportPrefixRepeat1),
        ("%=", Python::PERCENTEQ),
        ("^=", Python::CARETEQ),
        (
            "_simple_statements_repeat1",
            Python::SimpleStatementsRepeat1,
        ),
        ("raise_statement", Python::RaiseStatement),
        ("global_statement_repeat1", Python::GlobalStatementRepeat1),
        ("end", Python::End),
        ("for", Python::For),
        (
            "_comprehension_clauses_repeat1",
            Python::ComprehensionClausesRepeat1,
        ),
        ("pass_statement", Python::PassStatement),
        ("list_splat", Python::ListSplat),
        ("(", Python::LPAREN),
        (
            "_collection_elements_repeat1",
            Python::CollectionElementsRepeat1,
        ),
        (">>", Python::GTGT),
        ("_right_hand_side", Python::RightHandSide),
        ("for_statement", Python::ForStatement),
        ("import_prefix", Python::ImportPrefix),
        ("identifier", Python::Identifier),
        ("module_repeat1", Python::ModuleRepeat1),
        ("continue_statement", Python::ContinueStatement),
        ("assignment", Python::Assignment),
        ("string", Python::String),
        ("{", Python::LBRACE),
        ("__future__", Python::Future),
        ("interpolation", Python::Interpolation),
        (
            "comparison_operator_repeat1",
            Python::ComparisonOperatorRepeat1,
        ),
        (">>=", Python::GTGTEQ),
        ("-=", Python::DASHEQ),
        ("dotted_name", Python::DottedName),
        ("chevron", Python::Chevron),
        ("exec", Python::Exec),
        ("parenthesized_expression", Python::ParenthesizedExpression),
        ("expression", Python::Expression),
        ("aliased_import", Python::AliasedImport),
        ("return_statement", Python::ReturnStatement),
        ("]", Python::RBRACK),
        ("format_specifier_repeat1", Python::FormatSpecifierRepeat1),
        ("typed_parameter", Python::TypedParameter),
        ("<=", Python::LTEQ),
        ("future_import_statement", Python::FutureImportStatement),
        ("@=", Python::ATEQ),
        ("_patterns_repeat1", Python::PatternsRepeat1),
        (",", Python::COMMA),
        ("from", Python::From),
        ("*=", Python::STAREQ),
        ("import", Python::Import),
        ("slice", Python::Slice),
        ("def", Python::Def),
        ("list", Python::List),
        ("if_clause", Python::IfClause),
        ("!=", Python::BANGEQ),
        ("_parameters_repeat1", Python::ParametersRepeat1),
        ("as", Python::As),
        ("if_statement", Python::IfStatement),
        ("_string_content", Python::StringContent),
        ("while", Python::While),
        ("subscript", Python::Subscript),
        ("binary_operator", Python::BinaryOperator),
        ("//", Python::SLASHSLASH),
        ("not_operator", Python::NotOperator),
        ("_statement", Python::Statement),
        ("type", Python::Type),
        ("block", Python::Block),
        ("default_parameter", Python::DefaultParameter),
        ("expression_statement", Python::ExpressionStatement),
        ("continue", Python::Continue),
        ("\\\"", Python::DQUOTE),
        ("try_statement_repeat1", Python::TryStatementRepeat1),
        ("*", Python::STAR),
        ("finally_clause", Python::FinallyClause),
        ("comparison_operator", Python::ComparisonOperator),
        ("decorator", Python::Decorator),
        ("print", Python::Print),
        ("keyword_argument", Python::KeywordArgument),
        (":", Python::COLON),
        ("==", Python::EQEQ),
        ("elif", Python::Elif),
        ("raise", Python::Raise),
        ("global", Python::Global),
        ("escape_sequence", Python::EscapeSequence),
        ("module", Python::Module),
        ("parenthesized_list_splat", Python::ParenthesizedListSplat),
        ("_comprehension_clauses", Python::ComprehensionClauses),
        ("with_statement", Python::WithStatement),
        ("}", Python::RBRACE),
        ("and", Python::And),
        ("format_specifier_token1", Python::FormatSpecifierToken1),
        ("@", Python::AT),
        ("not", Python::Not),
        ("exec_statement", Python::ExecStatement),
        ("primary_expression", Python::PrimaryExpression),
        ("dictionary_repeat1", Python::DictionaryRepeat1),
        ("while_statement", Python::WhileStatement),
        ("float", Python::Float),
        ("dictionary", Python::Dictionary),
        ("argument_list", Python::ArgumentList),
        ("import_statement", Python::ImportStatement),
        ("|", Python::PIPE),
        ("nonlocal", Python::Nonlocal),
        ("unary_operator", Python::UnaryOperator),
        ("+=", Python::PLUSEQ),
        ("parameters", Python::Parameters),
        ("<<=", Python::LTLTEQ),
        ("print_statement", Python::PrintStatement),
        ("integer", Python::Integer),
        ("**=", Python::STARSTAREQ),
        (":=", Python::COLONEQ),
        ("with_clause_repeat1", Python::WithClauseRepeat1),
        ("_indent", Python::Indent),
        ("break", Python::Break),
        ("set_comprehension", Python::SetComprehension),
        ("lambda_parameters", Python::LambdaParameters),
        ("argument_list_repeat1", Python::ArgumentListRepeat1),
        ("//=", Python::SLASHSLASHEQ),
        ("ERROR", Python::Error),
        ("with_item", Python::WithItem),
        ("^", Python::CARET),
        ("&", Python::AMP),
        ("_not_escape_sequence", Python::NotEscapeSequence),
        ("/=", Python::SLASHEQ),
        ("_newline", Python::Newline),
        ("->", Python::DASHGT),
        ("except_clause", Python::ExceptClause),
        ("%", Python::PERCENT),
        ("return", Python::Return),
        ("conditional_expression", Python::ConditionalExpression),
        (
            "decorated_definition_repeat1",
            Python::DecoratedDefinitionRepeat1,
        ),
        ("call", Python::Call),
        ("~", Python::TILDE),
        ("in", Python::In),
        ("with_clause", Python::WithClause),
        ("pattern", Python::Pattern),
        ("_patterns", Python::Patterns),
        ("relative_import", Python::RelativeImport),
        ("**", Python::STARSTAR),
        (")", Python::RPAREN),
        ("assert_statement", Python::AssertStatement),
        ("tuple_pattern", Python::TuplePattern),
        ("+", Python::PLUS),
        ("[", Python::LBRACK),
        ("break_statement", Python::BreakStatement),
        ("nonlocal_statement", Python::NonlocalStatement),
    ],
};

impl From<&str> for Python {
    #[inline(always)]
    fn from(key: &str) -> Self {
        KEYS.get(key).unwrap().clone()
    }
}

impl From<u16> for Python {
    #[inline(always)]
    fn from(x: u16) -> Self {
        num::FromPrimitive::from_u16(x).unwrap_or(Self::Error)
    }
}

// Python == u16
impl PartialEq<u16> for Python {
    #[inline(always)]
    fn eq(&self, x: &u16) -> bool {
        *self == Python::from(*x)
    }
}

// u16 == Python
impl PartialEq<Python> for u16 {
    #[inline(always)]
    fn eq(&self, x: &Python) -> bool {
        *x == *self
    }
}
