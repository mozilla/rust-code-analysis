// Code generated; DO NOT EDIT.

#[derive(Clone, Debug, PartialEq, FromPrimitive)]
pub enum Java {
    End = 0,
    Identifier = 1,
    DecimalIntegerLiteral = 2,
    HexIntegerLiteral = 3,
    OctalIntegerLiteral = 4,
    BinaryIntegerLiteral = 5,
    DecimalFloatingPointLiteral = 6,
    HexFloatingPointLiteral = 7,
    True = 8,
    False = 9,
    CharacterLiteral = 10,
    StringLiteral = 11,
    NullLiteral = 12,
    LPAREN = 13,
    AMP = 14,
    RPAREN = 15,
    EQ = 16,
    PLUSEQ = 17,
    DASHEQ = 18,
    STAREQ = 19,
    SLASHEQ = 20,
    AMPEQ = 21,
    PIPEEQ = 22,
    CARETEQ = 23,
    PERCENTEQ = 24,
    LTLTEQ = 25,
    GTGTEQ = 26,
    GTGTGTEQ = 27,
    GT = 28,
    LT = 29,
    EQEQ = 30,
    GTEQ = 31,
    LTEQ = 32,
    BANGEQ = 33,
    AMPAMP = 34,
    PIPEPIPE = 35,
    PLUS = 36,
    DASH = 37,
    STAR = 38,
    SLASH = 39,
    PIPE = 40,
    CARET = 41,
    PERCENT = 42,
    LTLT = 43,
    GTGT = 44,
    GTGTGT = 45,
    Instanceof = 46,
    DASHGT = 47,
    COMMA = 48,
    QMARK = 49,
    COLON = 50,
    BANG = 51,
    TILDE = 52,
    PLUSPLUS = 53,
    DASHDASH = 54,
    New = 55,
    LBRACK = 56,
    RBRACK = 57,
    DOT = 58,
    Class = 59,
    COLONCOLON = 60,
    Extends = 61,
    SEMI = 62,
    LBRACE = 63,
    RBRACE = 64,
    Assert = 65,
    Switch = 66,
    Case = 67,
    Default = 68,
    Do = 69,
    While = 70,
    Break = 71,
    Continue = 72,
    Return = 73,
    Synchronized = 74,
    Throw = 75,
    Try = 76,
    Catch = 77,
    Finally = 78,
    If = 79,
    Else = 80,
    For = 81,
    AT = 82,
    Open = 83,
    Module = 84,
    Requires = 85,
    Exports = 86,
    To = 87,
    Opens = 88,
    Uses = 89,
    Provides = 90,
    With = 91,
    Transitive = 92,
    Static = 93,
    Package = 94,
    Import = 95,
    Enum = 96,
    Public = 97,
    Protected = 98,
    Private = 99,
    Abstract = 100,
    Final = 101,
    Strictfp = 102,
    Native = 103,
    Transient = 104,
    Volatile = 105,
    Implements = 106,
    ATinterface = 107,
    Interface = 108,
    Byte = 109,
    Short = 110,
    Int = 111,
    Long = 112,
    Char = 113,
    Float = 114,
    Double = 115,
    BooleanType = 116,
    VoidType = 117,
    DOTDOTDOT = 118,
    Throws2 = 119,
    This = 120,
    Super = 121,
    Comment = 122,
    Program = 123,
    Literal = 124,
    Expression = 125,
    CastExpression = 126,
    AssignmentExpression = 127,
    BinaryExpression = 128,
    InstanceofExpression = 129,
    LambdaExpression = 130,
    InferredParameters = 131,
    TernaryExpression = 132,
    UnaryExpression = 133,
    UpdateExpression = 134,
    PrimaryExpression = 135,
    ArrayCreationExpression = 136,
    DimensionsExpr = 137,
    ParenthesizedExpression = 138,
    ClassLiteral = 139,
    ObjectCreationExpression = 140,
    UnqualifiedObjectCreationExpression = 141,
    FieldAccess = 142,
    ArrayAccess = 143,
    MethodInvocation = 144,
    ArgumentList = 145,
    MethodReference = 146,
    TypeArguments = 147,
    Wildcard = 148,
    WildcardBounds = 149,
    Dimensions = 150,
    Statement = 151,
    Block = 152,
    ExpressionStatement = 153,
    LabeledStatement = 154,
    AssertStatement = 155,
    SwitchStatement = 156,
    SwitchBlock = 157,
    SwitchLabel = 158,
    DoStatement = 159,
    BreakStatement = 160,
    ContinueStatement = 161,
    ReturnStatement = 162,
    SynchronizedStatement = 163,
    ThrowStatement = 164,
    TryStatement = 165,
    CatchClause = 166,
    CatchFormalParameter = 167,
    CatchType = 168,
    FinallyClause = 169,
    TryWithResourcesStatement = 170,
    ResourceSpecification = 171,
    Resource = 172,
    IfStatement = 173,
    WhileStatement = 174,
    ForStatement = 175,
    EnhancedForStatement = 176,
    Annotation = 177,
    MarkerAnnotation = 178,
    Annotation2 = 179,
    AnnotationArgumentList = 180,
    ElementValuePair = 181,
    ElementValue = 182,
    ElementValueArrayInitializer = 183,
    Declaration = 184,
    ModuleDeclaration = 185,
    ModuleBody = 186,
    ModuleDirective = 187,
    RequiresModifier = 188,
    PackageDeclaration = 189,
    ImportDeclaration = 190,
    Asterisk = 191,
    EnumDeclaration = 192,
    EnumBody = 193,
    EnumBodyDeclarations = 194,
    EnumConstant = 195,
    ClassDeclaration = 196,
    Modifiers = 197,
    TypeParameters = 198,
    TypeParameter = 199,
    TypeBound = 200,
    Superclass = 201,
    SuperInterfaces = 202,
    InterfaceTypeList = 203,
    ClassBody = 204,
    StaticInitializer = 205,
    ConstructorDeclaration = 206,
    ConstructorDeclarator = 207,
    ConstructorBody = 208,
    ExplicitConstructorInvocation = 209,
    ScopedIdentifier = 210,
    FieldDeclaration = 211,
    AnnotationTypeDeclaration = 212,
    AnnotationTypeBody = 213,
    AnnotationTypeElementDeclaration = 214,
    DefaultValue = 215,
    InterfaceDeclaration = 216,
    ExtendsInterfaces = 217,
    InterfaceBody = 218,
    ConstantDeclaration = 219,
    VariableDeclaratorList = 220,
    VariableDeclarator = 221,
    VariableDeclaratorId = 222,
    ArrayInitializer = 223,
    Type = 224,
    UnannotatedType = 225,
    AnnotatedType = 226,
    ScopedTypeIdentifier = 227,
    GenericType = 228,
    ArrayType = 229,
    IntegralType = 230,
    FloatingPointType = 231,
    MethodHeader = 232,
    MethodDeclarator = 233,
    FormalParameters = 234,
    FormalParameter = 235,
    ReceiverParameter = 236,
    SpreadParameter = 237,
    Throws = 238,
    LocalVariableDeclaration = 239,
    MethodDeclaration = 240,
    ProgramRepeat1 = 241,
    CastExpressionRepeat1 = 242,
    InferredParametersRepeat1 = 243,
    ArrayCreationExpressionRepeat1 = 244,
    DimensionsExprRepeat1 = 245,
    ArgumentListRepeat1 = 246,
    TypeArgumentsRepeat1 = 247,
    DimensionsRepeat1 = 248,
    SwitchBlockRepeat1 = 249,
    TryStatementRepeat1 = 250,
    CatchTypeRepeat1 = 251,
    ResourceSpecificationRepeat1 = 252,
    ForStatementRepeat1 = 253,
    ForStatementRepeat2 = 254,
    AnnotationArgumentListRepeat1 = 255,
    ElementValueArrayInitializerRepeat1 = 256,
    ModuleBodyRepeat1 = 257,
    ModuleDirectiveRepeat1 = 258,
    ModuleDirectiveRepeat2 = 259,
    EnumBodyRepeat1 = 260,
    EnumBodyDeclarationsRepeat1 = 261,
    ModifiersRepeat1 = 262,
    TypeParametersRepeat1 = 263,
    TypeBoundRepeat1 = 264,
    InterfaceTypeListRepeat1 = 265,
    AnnotationTypeBodyRepeat1 = 266,
    InterfaceBodyRepeat1 = 267,
    VariableDeclaratorListRepeat1 = 268,
    ArrayInitializerRepeat1 = 269,
    FormalParametersRepeat1 = 270,
    TypeIdentifier = 271,
    Error = 272,
}

impl std::fmt::Display for Java {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{:?}", self)
    }
}

#[allow(clippy::unreadable_literal)]
static KEYS: phf::Map<&'static str, &'static str> = ::phf::Map {
    key: 732231254413039614,
    disps: ::phf::Slice::Static(&[
        (0, 30),
        (0, 0),
        (0, 42),
        (0, 113),
        (0, 4),
        (1, 59),
        (0, 101),
        (0, 0),
        (0, 2),
        (1, 1),
        (0, 79),
        (1, 98),
        (0, 49),
        (1, 0),
        (0, 5),
        (0, 221),
        (0, 54),
        (0, 24),
        (0, 4),
        (0, 15),
        (0, 80),
        (1, 0),
        (0, 127),
        (2, 27),
        (0, 35),
        (0, 118),
        (0, 146),
        (0, 4),
        (1, 165),
        (3, 97),
        (4, 200),
        (0, 233),
        (0, 131),
        (1, 74),
        (1, 95),
        (0, 1),
        (0, 61),
        (16, 243),
        (0, 22),
        (1, 233),
        (0, 243),
        (0, 6),
        (2, 45),
        (2, 58),
        (5, 50),
        (3, 36),
        (1, 175),
        (5, 256),
        (6, 272),
        (4, 222),
        (1, 224),
        (0, 0),
        (0, 31),
        (13, 50),
        (0, 56),
    ]),
    entries: ::phf::Slice::Static(&[
        ("EnumBodyRepeat1", "enum_body_repeat1"),
        ("Abstract", "abstract"),
        ("STAREQ", "*="),
        ("FormalParameters", "formal_parameters"),
        ("LT", "<"),
        (
            "ArrayCreationExpressionRepeat1",
            "array_creation_expression_repeat1",
        ),
        ("Interface", "interface"),
        ("Return", "return"),
        ("DefaultValue", "_default_value"),
        ("PERCENTEQ", "%="),
        ("Import", "import"),
        ("CatchFormalParameter", "catch_formal_parameter"),
        ("StringLiteral", "string_literal"),
        ("MethodHeader", "_method_header"),
        ("Transitive", "transitive"),
        ("To", "to"),
        ("AMP", "&"),
        ("Resource", "resource"),
        ("AnnotatedType", "annotated_type"),
        ("Module", "module"),
        ("TypeArguments", "type_arguments"),
        ("Literal", "_literal"),
        ("VoidType", "void_type"),
        ("CharacterLiteral", "character_literal"),
        ("BANGEQ", "!="),
        ("Throws", "throws"),
        ("Int", "int"),
        ("ThrowStatement", "throw_statement"),
        ("ForStatementRepeat1", "for_statement_repeat1"),
        ("UpdateExpression", "update_expression"),
        ("ImportDeclaration", "import_declaration"),
        ("ScopedTypeIdentifier", "scoped_type_identifier"),
        ("FormalParameter", "formal_parameter"),
        ("FormalParametersRepeat1", "formal_parameters_repeat1"),
        ("PIPE", "|"),
        ("CastExpressionRepeat1", "cast_expression_repeat1"),
        ("DASHEQ", "-="),
        ("BreakStatement", "break_statement"),
        ("ScopedIdentifier", "scoped_identifier"),
        ("ArrayInitializerRepeat1", "array_initializer_repeat1"),
        ("CatchClause", "catch_clause"),
        ("VariableDeclarator", "variable_declarator"),
        ("PLUS", "+"),
        ("Super", "super"),
        (
            "AnnotationArgumentListRepeat1",
            "annotation_argument_list_repeat1",
        ),
        ("Implements", "implements"),
        ("Strictfp", "strictfp"),
        ("TernaryExpression", "ternary_expression"),
        ("Static", "static"),
        ("VariableDeclaratorList", "_variable_declarator_list"),
        ("DASH", "-"),
        ("ArgumentListRepeat1", "argument_list_repeat1"),
        ("ModuleDirective", "module_directive"),
        ("WhileStatement", "while_statement"),
        ("COLON", ":"),
        ("Private", "private"),
        ("Double", "double"),
        ("Identifier", "identifier"),
        ("False", "false"),
        ("Modifiers", "modifiers"),
        ("ModuleDirectiveRepeat2", "module_directive_repeat2"),
        ("PackageDeclaration", "package_declaration"),
        (
            "ElementValueArrayInitializerRepeat1",
            "element_value_array_initializer_repeat1",
        ),
        ("Long", "long"),
        ("InterfaceBodyRepeat1", "interface_body_repeat1"),
        ("Extends", "extends"),
        ("ClassBody", "class_body"),
        ("Native", "native"),
        ("TryStatementRepeat1", "try_statement_repeat1"),
        ("DecimalIntegerLiteral", "decimal_integer_literal"),
        ("SLASHEQ", "/="),
        ("VariableDeclaratorId", "_variable_declarator_id"),
        ("GTGTGT", ">>>"),
        ("RBRACE", "}"),
        ("ReturnStatement", "return_statement"),
        ("FieldAccess", "field_access"),
        ("Throws2", "throws"),
        ("Error", "ERROR"),
        ("TryWithResourcesStatement", "try_with_resources_statement"),
        ("Dimensions", "dimensions"),
        ("ElementValuePair", "element_value_pair"),
        ("TypeIdentifier", "type_identifier"),
        ("For", "for"),
        ("EnumDeclaration", "enum_declaration"),
        ("TypeBound", "type_bound"),
        (
            "AnnotationTypeElementDeclaration",
            "annotation_type_element_declaration",
        ),
        ("STAR", "*"),
        ("DimensionsRepeat1", "dimensions_repeat1"),
        ("Asterisk", "asterisk"),
        ("IfStatement", "if_statement"),
        ("EnumBody", "enum_body"),
        ("TypeParameter", "type_parameter"),
        ("EnumBodyDeclarations", "enum_body_declarations"),
        ("AMPAMP", "&&"),
        ("ModuleDirectiveRepeat1", "module_directive_repeat1"),
        ("ModifiersRepeat1", "modifiers_repeat1"),
        ("LabeledStatement", "labeled_statement"),
        ("QMARK", "?"),
        ("Superclass", "superclass"),
        ("PrimaryExpression", "primary_expression"),
        ("PIPEEQ", "|="),
        ("Wildcard", "wildcard"),
        ("InterfaceBody", "interface_body"),
        ("InterfaceTypeListRepeat1", "interface_type_list_repeat1"),
        ("Exports", "exports"),
        ("ArrayAccess", "array_access"),
        ("Assert", "assert"),
        ("Declaration", "declaration"),
        (
            "UnqualifiedObjectCreationExpression",
            "_unqualified_object_creation_expression",
        ),
        ("Switch", "switch"),
        ("MethodDeclaration", "method_declaration"),
        (
            "VariableDeclaratorListRepeat1",
            "_variable_declarator_list_repeat1",
        ),
        ("Try", "try"),
        ("InferredParametersRepeat1", "inferred_parameters_repeat1"),
        ("ArrayInitializer", "array_initializer"),
        ("WildcardBounds", "_wildcard_bounds"),
        ("CARET", "^"),
        ("Uses", "uses"),
        ("ArrayCreationExpression", "array_creation_expression"),
        (
            "DecimalFloatingPointLiteral",
            "decimal_floating_point_literal",
        ),
        ("ReceiverParameter", "receiver_parameter"),
        ("Default", "default"),
        ("SpreadParameter", "spread_parameter"),
        ("ExpressionStatement", "expression_statement"),
        ("UnaryExpression", "unary_expression"),
        ("PLUSEQ", "+="),
        ("Short", "short"),
        ("SynchronizedStatement", "synchronized_statement"),
        ("CatchType", "catch_type"),
        ("SEMI", ";"),
        ("EnumConstant", "enum_constant"),
        ("Comment", "comment"),
        ("EQ", "="),
        ("ArrayType", "array_type"),
        ("ClassDeclaration", "class_declaration"),
        ("FieldDeclaration", "field_declaration"),
        ("GT", ">"),
        ("LBRACE", "{"),
        ("Public", "public"),
        ("MethodDeclarator", "_method_declarator"),
        ("AnnotationTypeDeclaration", "annotation_type_declaration"),
        ("BANG", "!"),
        ("Break", "break"),
        ("HexFloatingPointLiteral", "hex_floating_point_literal"),
        ("RequiresModifier", "requires_modifier"),
        ("End", "end"),
        ("IntegralType", "integral_type"),
        ("Protected", "protected"),
        ("Package", "package"),
        ("ConstructorBody", "constructor_body"),
        ("Catch", "catch"),
        ("Opens", "opens"),
        ("ResourceSpecification", "resource_specification"),
        ("EnhancedForStatement", "enhanced_for_statement"),
        ("AssignmentExpression", "assignment_expression"),
        ("StaticInitializer", "static_initializer"),
        ("TypeParameters", "type_parameters"),
        ("Type", "_type"),
        ("BooleanType", "boolean_type"),
        ("ParenthesizedExpression", "parenthesized_expression"),
        ("Annotation2", "annotation"),
        ("AnnotationTypeBody", "annotation_type_body"),
        ("DimensionsExprRepeat1", "dimensions_expr_repeat1"),
        ("SwitchBlock", "switch_block"),
        ("Finally", "finally"),
        ("AnnotationTypeBodyRepeat1", "annotation_type_body_repeat1"),
        ("Open", "open"),
        ("ArgumentList", "argument_list"),
        ("Char", "char"),
        ("ClassLiteral", "class_literal"),
        ("Statement", "statement"),
        ("This", "this"),
        ("Block", "block"),
        ("Enum", "enum"),
        ("NullLiteral", "null_literal"),
        ("ConstructorDeclarator", "_constructor_declarator"),
        ("Volatile", "volatile"),
        ("PLUSPLUS", "++"),
        ("MethodInvocation", "method_invocation"),
        ("Case", "case"),
        ("TypeParametersRepeat1", "type_parameters_repeat1"),
        ("TypeBoundRepeat1", "type_bound_repeat1"),
        ("ATinterface", "@interface"),
        ("Instanceof", "instanceof"),
        ("Continue", "continue"),
        ("Final", "final"),
        (
            "ResourceSpecificationRepeat1",
            "resource_specification_repeat1",
        ),
        ("DOTDOTDOT", "..."),
        ("FinallyClause", "finally_clause"),
        ("ForStatement", "for_statement"),
        ("PIPEPIPE", "||"),
        ("Requires", "requires"),
        ("SwitchStatement", "switch_statement"),
        ("ModuleBody", "module_body"),
        ("ConstructorDeclaration", "constructor_declaration"),
        ("InferredParameters", "inferred_parameters"),
        ("InstanceofExpression", "instanceof_expression"),
        ("AnnotationArgumentList", "annotation_argument_list"),
        ("GenericType", "generic_type"),
        (
            "EnumBodyDeclarationsRepeat1",
            "enum_body_declarations_repeat1",
        ),
        ("Else", "else"),
        ("AssertStatement", "assert_statement"),
        ("HexIntegerLiteral", "hex_integer_literal"),
        ("Annotation", "_annotation"),
        ("CatchTypeRepeat1", "catch_type_repeat1"),
        ("COMMA", ","),
        ("Class", "class"),
        ("ProgramRepeat1", "program_repeat1"),
        ("UnannotatedType", "_unannotated_type"),
        (
            "ElementValueArrayInitializer",
            "element_value_array_initializer",
        ),
        ("ConstantDeclaration", "constant_declaration"),
        ("RBRACK", "]"),
        (
            "ExplicitConstructorInvocation",
            "explicit_constructor_invocation",
        ),
        ("GTGT", ">>"),
        ("Do", "do"),
        ("Throw", "throw"),
        ("Transient", "transient"),
        ("DASHDASH", "--"),
        ("LPAREN", "("),
        ("SuperInterfaces", "super_interfaces"),
        ("ModuleDeclaration", "module_declaration"),
        ("Byte", "byte"),
        ("LocalVariableDeclaration", "local_variable_declaration"),
        ("DoStatement", "do_statement"),
        ("SLASH", "/"),
        ("While", "while"),
        ("GTEQ", ">="),
        ("EQEQ", "=="),
        ("If", "if"),
        ("GTGTEQ", ">>="),
        ("ContinueStatement", "continue_statement"),
        ("Synchronized", "synchronized"),
        ("GTGTGTEQ", ">>>="),
        ("OctalIntegerLiteral", "octal_integer_literal"),
        ("CARETEQ", "^="),
        ("LambdaExpression", "lambda_expression"),
        ("Expression", "expression"),
        ("Provides", "provides"),
        ("With", "with"),
        ("ForStatementRepeat2", "for_statement_repeat2"),
        ("True", "true"),
        ("LTLT", "<<"),
        ("DimensionsExpr", "dimensions_expr"),
        ("PERCENT", "%"),
        ("TILDE", "~"),
        ("BinaryExpression", "binary_expression"),
        ("DOT", "."),
        ("COLONCOLON", "::"),
        ("AT", "@"),
        ("InterfaceTypeList", "interface_type_list"),
        ("ElementValue", "_element_value"),
        ("New", "new"),
        ("ExtendsInterfaces", "extends_interfaces"),
        ("Program", "program"),
        ("MethodReference", "method_reference"),
        ("DASHGT", "->"),
        ("SwitchLabel", "switch_label"),
        ("SwitchBlockRepeat1", "switch_block_repeat1"),
        ("MarkerAnnotation", "marker_annotation"),
        ("LTEQ", "<="),
        ("TryStatement", "try_statement"),
        ("LTLTEQ", "<<="),
        ("BinaryIntegerLiteral", "binary_integer_literal"),
        ("AMPEQ", "&="),
        ("TypeArgumentsRepeat1", "type_arguments_repeat1"),
        ("ModuleBodyRepeat1", "module_body_repeat1"),
        ("RPAREN", ")"),
        ("LBRACK", "["),
        ("ObjectCreationExpression", "object_creation_expression"),
        ("Float", "float"),
        ("CastExpression", "cast_expression"),
        ("InterfaceDeclaration", "interface_declaration"),
        ("FloatingPointType", "floating_point_type"),
    ]),
};

impl From<Java> for &str {
    #[inline(always)]
    fn from(grammar: Java) -> &'static str {
        KEYS.get(grammar.to_string().as_str()).unwrap()
    }
}

impl From<u16> for Java {
    #[inline(always)]
    fn from(x: u16) -> Self {
        num::FromPrimitive::from_u16(x).unwrap_or(Self::Error)
    }
}

// Java == u16
impl PartialEq<u16> for Java {
    #[inline(always)]
    fn eq(&self, x: &u16) -> bool {
        *self == Java::from(*x)
    }
}

// u16 == Java
impl PartialEq<Java> for u16 {
    #[inline(always)]
    fn eq(&self, x: &Java) -> bool {
        *x == *self
    }
}
